
Nucleo_RTOS_Menu_LED_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008914  08008914  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800891c  0800891c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a80  2000007c  080089a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004afc  080089a0  00024afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c060  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003810  00000000  00000000  0003c10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024a7e  00000000  00000000  00040a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001580c  00000000  00000000  000654b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d8fbe  00000000  00000000  0007acc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00153c80  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fc8  00000000  00000000  00153cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048b0  00000000  00000000  00154ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008168 	.word	0x08008168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08008168 	.word	0x08008168

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96e 	b.w	8000528 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	4604      	mov	r4, r0
 800026c:	468c      	mov	ip, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8083 	bne.w	800037a <__udivmoddi4+0x116>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d947      	bls.n	800030a <__udivmoddi4+0xa6>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	fa24 f000 	lsr.w	r0, r4, r0
 8000288:	4091      	lsls	r1, r2
 800028a:	4097      	lsls	r7, r2
 800028c:	ea40 0c01 	orr.w	ip, r0, r1
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbc f6f8 	udiv	r6, ip, r8
 800029c:	fa1f fe87 	uxth.w	lr, r7
 80002a0:	fb08 c116 	mls	r1, r8, r6, ip
 80002a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x60>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 8119 	bcs.w	80004ec <__udivmoddi4+0x288>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 8116 	bls.w	80004ec <__udivmoddi4+0x288>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d8:	45a6      	cmp	lr, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8105 	bcs.w	80004f0 <__udivmoddi4+0x28c>
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	f240 8102 	bls.w	80004f0 <__udivmoddi4+0x28c>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f4:	eba4 040e 	sub.w	r4, r4, lr
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa0>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	b902      	cbnz	r2, 800030e <__udivmoddi4+0xaa>
 800030c:	deff      	udf	#255	; 0xff
 800030e:	fab2 f282 	clz	r2, r2
 8000312:	2a00      	cmp	r2, #0
 8000314:	d150      	bne.n	80003b8 <__udivmoddi4+0x154>
 8000316:	1bcb      	subs	r3, r1, r7
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	2601      	movs	r6, #1
 8000322:	fbb3 fcfe 	udiv	ip, r3, lr
 8000326:	0c21      	lsrs	r1, r4, #16
 8000328:	fb0e 331c 	mls	r3, lr, ip, r3
 800032c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000330:	fb08 f30c 	mul.w	r3, r8, ip
 8000334:	428b      	cmp	r3, r1
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000338:	1879      	adds	r1, r7, r1
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0xe2>
 8000340:	428b      	cmp	r3, r1
 8000342:	f200 80e9 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 8000346:	4684      	mov	ip, r0
 8000348:	1ac9      	subs	r1, r1, r3
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1110 	mls	r1, lr, r0, r1
 8000354:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x10c>
 8000360:	193c      	adds	r4, r7, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x10a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80d9 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e7bf      	b.n	80002fa <__udivmoddi4+0x96>
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0x12e>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80b1 	beq.w	80004e6 <__udivmoddi4+0x282>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x1cc>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0x140>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80b8 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0103 	sbc.w	r1, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	468c      	mov	ip, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0a8      	beq.n	8000304 <__udivmoddi4+0xa0>
 80003b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0xa0>
 80003b8:	f1c2 0320 	rsb	r3, r2, #32
 80003bc:	fa20 f603 	lsr.w	r6, r0, r3
 80003c0:	4097      	lsls	r7, r2
 80003c2:	fa01 f002 	lsl.w	r0, r1, r2
 80003c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ca:	40d9      	lsrs	r1, r3
 80003cc:	4330      	orrs	r0, r6
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb06 f108 	mul.w	r1, r6, r8
 80003e4:	4299      	cmp	r1, r3
 80003e6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x19c>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f2:	f080 808d 	bcs.w	8000510 <__udivmoddi4+0x2ac>
 80003f6:	4299      	cmp	r1, r3
 80003f8:	f240 808a 	bls.w	8000510 <__udivmoddi4+0x2ac>
 80003fc:	3e02      	subs	r6, #2
 80003fe:	443b      	add	r3, r7
 8000400:	1a5b      	subs	r3, r3, r1
 8000402:	b281      	uxth	r1, r0
 8000404:	fbb3 f0fe 	udiv	r0, r3, lr
 8000408:	fb0e 3310 	mls	r3, lr, r0, r3
 800040c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000410:	fb00 f308 	mul.w	r3, r0, r8
 8000414:	428b      	cmp	r3, r1
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x1c4>
 8000418:	1879      	adds	r1, r7, r1
 800041a:	f100 3cff 	add.w	ip, r0, #4294967295
 800041e:	d273      	bcs.n	8000508 <__udivmoddi4+0x2a4>
 8000420:	428b      	cmp	r3, r1
 8000422:	d971      	bls.n	8000508 <__udivmoddi4+0x2a4>
 8000424:	3802      	subs	r0, #2
 8000426:	4439      	add	r1, r7
 8000428:	1acb      	subs	r3, r1, r3
 800042a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042e:	e778      	b.n	8000322 <__udivmoddi4+0xbe>
 8000430:	f1c6 0c20 	rsb	ip, r6, #32
 8000434:	fa03 f406 	lsl.w	r4, r3, r6
 8000438:	fa22 f30c 	lsr.w	r3, r2, ip
 800043c:	431c      	orrs	r4, r3
 800043e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044a:	fa21 f10c 	lsr.w	r1, r1, ip
 800044e:	431f      	orrs	r7, r3
 8000450:	0c3b      	lsrs	r3, r7, #16
 8000452:	fbb1 f9fe 	udiv	r9, r1, lr
 8000456:	fa1f f884 	uxth.w	r8, r4
 800045a:	fb0e 1119 	mls	r1, lr, r9, r1
 800045e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000462:	fb09 fa08 	mul.w	sl, r9, r8
 8000466:	458a      	cmp	sl, r1
 8000468:	fa02 f206 	lsl.w	r2, r2, r6
 800046c:	fa00 f306 	lsl.w	r3, r0, r6
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x220>
 8000472:	1861      	adds	r1, r4, r1
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d248      	bcs.n	800050c <__udivmoddi4+0x2a8>
 800047a:	458a      	cmp	sl, r1
 800047c:	d946      	bls.n	800050c <__udivmoddi4+0x2a8>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4421      	add	r1, r4
 8000484:	eba1 010a 	sub.w	r1, r1, sl
 8000488:	b2bf      	uxth	r7, r7
 800048a:	fbb1 f0fe 	udiv	r0, r1, lr
 800048e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000492:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45b8      	cmp	r8, r7
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x24a>
 800049e:	19e7      	adds	r7, r4, r7
 80004a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a4:	d22e      	bcs.n	8000504 <__udivmoddi4+0x2a0>
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d92c      	bls.n	8000504 <__udivmoddi4+0x2a0>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4427      	add	r7, r4
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba7 0708 	sub.w	r7, r7, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454f      	cmp	r7, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	4649      	mov	r1, r9
 80004c0:	d31a      	bcc.n	80004f8 <__udivmoddi4+0x294>
 80004c2:	d017      	beq.n	80004f4 <__udivmoddi4+0x290>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x27a>
 80004c6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ca:	eb67 0701 	sbc.w	r7, r7, r1
 80004ce:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d2:	40f2      	lsrs	r2, r6
 80004d4:	ea4c 0202 	orr.w	r2, ip, r2
 80004d8:	40f7      	lsrs	r7, r6
 80004da:	e9c5 2700 	strd	r2, r7, [r5]
 80004de:	2600      	movs	r6, #0
 80004e0:	4631      	mov	r1, r6
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	462e      	mov	r6, r5
 80004e8:	4628      	mov	r0, r5
 80004ea:	e70b      	b.n	8000304 <__udivmoddi4+0xa0>
 80004ec:	4606      	mov	r6, r0
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fd      	b.n	80002f0 <__udivmoddi4+0x8c>
 80004f4:	4543      	cmp	r3, r8
 80004f6:	d2e5      	bcs.n	80004c4 <__udivmoddi4+0x260>
 80004f8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fc:	eb69 0104 	sbc.w	r1, r9, r4
 8000500:	3801      	subs	r0, #1
 8000502:	e7df      	b.n	80004c4 <__udivmoddi4+0x260>
 8000504:	4608      	mov	r0, r1
 8000506:	e7d2      	b.n	80004ae <__udivmoddi4+0x24a>
 8000508:	4660      	mov	r0, ip
 800050a:	e78d      	b.n	8000428 <__udivmoddi4+0x1c4>
 800050c:	4681      	mov	r9, r0
 800050e:	e7b9      	b.n	8000484 <__udivmoddi4+0x220>
 8000510:	4666      	mov	r6, ip
 8000512:	e775      	b.n	8000400 <__udivmoddi4+0x19c>
 8000514:	4630      	mov	r0, r6
 8000516:	e74a      	b.n	80003ae <__udivmoddi4+0x14a>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	4439      	add	r1, r7
 800051e:	e713      	b.n	8000348 <__udivmoddi4+0xe4>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e724      	b.n	8000370 <__udivmoddi4+0x10c>
 8000526:	bf00      	nop

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ledTask>:
                                 "=========================\n"  ,
                                 "(none, e1, e2, e3, e4)\n"      ,
                                 "Enter your choice here: "};

void ledTask(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledTask */
  /* Infinite loop */
  for(;;)
  {
    ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8000534:	f04f 31ff 	mov.w	r1, #4294967295
 8000538:	2001      	movs	r0, #1
 800053a:	f006 fa11 	bl	8006960 <ulTaskNotifyTake>
    for(int i = 0; i < 5; ++i)
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00d      	b.n	8000560 <ledTask+0x34>
    {
      xQueueSendToBack(printQueueHandle, &led_msg[i], portMAX_DELAY);
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <ledTask+0x3c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <ledTask+0x40>)
 800054e:	1899      	adds	r1, r3, r2
 8000550:	2300      	movs	r3, #0
 8000552:	f04f 32ff 	mov.w	r2, #4294967295
 8000556:	f004 ff35 	bl	80053c4 <xQueueGenericSend>
    for(int i = 0; i < 5; ++i)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b04      	cmp	r3, #4
 8000564:	ddee      	ble.n	8000544 <ledTask+0x18>
    ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8000566:	e7e5      	b.n	8000534 <ledTask+0x8>
 8000568:	200049b8 	.word	0x200049b8
 800056c:	08008638 	.word	0x08008638

08000570 <stopTimers>:
    // recv from queue the command
  }
  /* USER CODE END ledTask */
}
void stopTimers(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  for(int i = 0; i < NUM_TIMERS; ++i)
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	e009      	b.n	8000590 <stopTimers+0x20>
  {
	  osTimerStop(ledTimerHandleArr[i]);
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <stopTimers+0x30>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	4618      	mov	r0, r3
 8000586:	f004 fc4d 	bl	8004e24 <osTimerStop>
  for(int i = 0; i < NUM_TIMERS; ++i)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b03      	cmp	r3, #3
 8000594:	ddf2      	ble.n	800057c <stopTimers+0xc>
  }
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20004a08 	.word	0x20004a08

080005a4 <ledTimerCb1>:

/* ledTimerCb function */
void ledTimerCb1(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledTimerCb */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	480a      	ldr	r0, [pc, #40]	; (80005d8 <ledTimerCb1+0x34>)
 80005b0:	f001 feef 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <ledTimerCb1+0x38>)
 80005ba:	f001 feea 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005be:	2120      	movs	r1, #32
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <ledTimerCb1+0x34>)
 80005c2:	f001 fee6 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <ledTimerCb1+0x38>)
 80005cc:	f001 fee1 	bl	8002392 <HAL_GPIO_TogglePin>
  /* USER CODE END ledTimerCb */
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40020400 	.word	0x40020400

080005e0 <ledTimerCb2>:

void ledTimerCb2(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  //TODO: Make this into for loop.
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <ledTimerCb2+0x34>)
 80005ec:	f001 fed1 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <ledTimerCb2+0x38>)
 80005f6:	f001 fecc 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005fa:	2120      	movs	r1, #32
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <ledTimerCb2+0x34>)
 80005fe:	f001 fec8 	bl	8002392 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <ledTimerCb2+0x38>)
 8000608:	f001 fec3 	bl	8002392 <HAL_GPIO_TogglePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020000 	.word	0x40020000
 8000618:	40020400 	.word	0x40020400

0800061c <ledTimerCb3>:

void ledTimerCb3(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  static int ledState = 1;

  if(ledState == 1)
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <ledTimerCb3+0x9c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10b      	bne.n	8000644 <ledTimerCb3+0x28>
  {
    ledSetAllLow();
 800062c:	f000 f8a0 	bl	8000770 <ledSetAllLow>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <ledTimerCb3+0xa0>)
 8000634:	f001 fead 	bl	8002392 <HAL_GPIO_TogglePin>
    ++ledState;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <ledTimerCb3+0x9c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <ledTimerCb3+0x9c>)
 8000640:	6013      	str	r3, [r2, #0]
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	ledState = 1;
  }
}
 8000642:	e035      	b.n	80006b0 <ledTimerCb3+0x94>
  else if(ledState == 2)
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <ledTimerCb3+0x9c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d10e      	bne.n	800066a <ledTimerCb3+0x4e>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	481b      	ldr	r0, [pc, #108]	; (80006bc <ledTimerCb3+0xa0>)
 8000650:	f001 fe9f 	bl	8002392 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <ledTimerCb3+0xa4>)
 800065a:	f001 fe9a 	bl	8002392 <HAL_GPIO_TogglePin>
	++ledState;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <ledTimerCb3+0x9c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <ledTimerCb3+0x9c>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	e022      	b.n	80006b0 <ledTimerCb3+0x94>
  else if(ledState == 3)
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <ledTimerCb3+0x9c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d10e      	bne.n	8000690 <ledTimerCb3+0x74>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <ledTimerCb3+0xa4>)
 8000678:	f001 fe8b 	bl	8002392 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800067c:	2120      	movs	r1, #32
 800067e:	480f      	ldr	r0, [pc, #60]	; (80006bc <ledTimerCb3+0xa0>)
 8000680:	f001 fe87 	bl	8002392 <HAL_GPIO_TogglePin>
	++ledState;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <ledTimerCb3+0x9c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <ledTimerCb3+0x9c>)
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	e00f      	b.n	80006b0 <ledTimerCb3+0x94>
  else if(ledState == 4)
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <ledTimerCb3+0x9c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b04      	cmp	r3, #4
 8000696:	d10b      	bne.n	80006b0 <ledTimerCb3+0x94>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000698:	2120      	movs	r1, #32
 800069a:	4808      	ldr	r0, [pc, #32]	; (80006bc <ledTimerCb3+0xa0>)
 800069c:	f001 fe79 	bl	8002392 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80006a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <ledTimerCb3+0xa4>)
 80006a6:	f001 fe74 	bl	8002392 <HAL_GPIO_TogglePin>
	ledState = 1;
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <ledTimerCb3+0x9c>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400

080006c4 <ledTimerCb4>:

void ledTimerCb4(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	  static int ledState = 4;

	  if(ledState == 1)
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <ledTimerCb4+0xa0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10c      	bne.n	80006ee <ledTimerCb4+0x2a>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4823      	ldr	r0, [pc, #140]	; (8000768 <ledTimerCb4+0xa4>)
 80006da:	f001 fe5a 	bl	8002392 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4822      	ldr	r0, [pc, #136]	; (800076c <ledTimerCb4+0xa8>)
 80006e2:	f001 fe56 	bl	8002392 <HAL_GPIO_TogglePin>
	    ledState = 4;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <ledTimerCb4+0xa0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	601a      	str	r2, [r3, #0]
	  {
		ledSetAllLow();
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		--ledState;
	  }
}
 80006ec:	e035      	b.n	800075a <ledTimerCb4+0x96>
	  else if(ledState == 2)
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <ledTimerCb4+0xa0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d10e      	bne.n	8000714 <ledTimerCb4+0x50>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f6:	2120      	movs	r1, #32
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <ledTimerCb4+0xa8>)
 80006fa:	f001 fe4a 	bl	8002392 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4819      	ldr	r0, [pc, #100]	; (8000768 <ledTimerCb4+0xa4>)
 8000704:	f001 fe45 	bl	8002392 <HAL_GPIO_TogglePin>
		--ledState;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <ledTimerCb4+0xa0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <ledTimerCb4+0xa0>)
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	e022      	b.n	800075a <ledTimerCb4+0x96>
	  else if(ledState == 3)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <ledTimerCb4+0xa0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d10e      	bne.n	800073a <ledTimerCb4+0x76>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <ledTimerCb4+0xa4>)
 8000722:	f001 fe36 	bl	8002392 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000726:	2120      	movs	r1, #32
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <ledTimerCb4+0xa8>)
 800072a:	f001 fe32 	bl	8002392 <HAL_GPIO_TogglePin>
		--ledState;
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <ledTimerCb4+0xa0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3b01      	subs	r3, #1
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <ledTimerCb4+0xa0>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	e00f      	b.n	800075a <ledTimerCb4+0x96>
	  else if(ledState == 4)
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <ledTimerCb4+0xa0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d10b      	bne.n	800075a <ledTimerCb4+0x96>
		ledSetAllLow();
 8000742:	f000 f815 	bl	8000770 <ledSetAllLow>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <ledTimerCb4+0xa4>)
 800074c:	f001 fe21 	bl	8002392 <HAL_GPIO_TogglePin>
		--ledState;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <ledTimerCb4+0xa0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <ledTimerCb4+0xa0>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004
 8000768:	40020400 	.word	0x40020400
 800076c:	40020000 	.word	0x40020000

08000770 <ledSetAllLow>:

void ledSetAllLow(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	21a0      	movs	r1, #160	; 0xa0
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <ledSetAllLow+0x20>)
 800077a:	f001 fdf1 	bl	8002360 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <ledSetAllLow+0x24>)
 8000786:	f001 fdeb 	bl	8002360 <HAL_GPIO_WritePin>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400

08000798 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken;

    if(uxQueueMessagesWaitingFromISR(commandQueueHandle) < 32)
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <HAL_UART_RxCpltCallback+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 f8a5 	bl	80058f4 <uxQueueMessagesWaitingFromISR>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b1f      	cmp	r3, #31
 80007ae:	d814      	bhi.n	80007da <HAL_UART_RxCpltCallback+0x42>
    {
    	xQueueSendToBackFromISR(commandQueueHandle, &data, &xHigherPriorityTaskWoken);
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_UART_RxCpltCallback+0x64>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f107 020c 	add.w	r2, r7, #12
 80007b8:	2300      	movs	r3, #0
 80007ba:	4911      	ldr	r1, [pc, #68]	; (8000800 <HAL_UART_RxCpltCallback+0x68>)
 80007bc:	f004 ff00 	bl	80055c0 <xQueueGenericSendFromISR>
    	if(data == '\n')
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_UART_RxCpltCallback+0x68>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b0a      	cmp	r3, #10
 80007c6:	d110      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x52>
    	{
    		vTaskNotifyGiveFromISR(commandHandlingHandle, &xHigherPriorityTaskWoken);
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_RxCpltCallback+0x6c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f107 020c 	add.w	r2, r7, #12
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 f9c4 	bl	8006b60 <vTaskNotifyGiveFromISR>
 80007d8:	e007      	b.n	80007ea <HAL_UART_RxCpltCallback+0x52>
    	}
    }
    else
    {
       vTaskNotifyGiveFromISR(commandHandlingHandle, &xHigherPriorityTaskWoken);
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_UART_RxCpltCallback+0x6c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f107 020c 	add.w	r2, r7, #12
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 f9bb 	bl	8006b60 <vTaskNotifyGiveFromISR>
    }
    HAL_UART_Receive_IT(&huart2, &data, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	4904      	ldr	r1, [pc, #16]	; (8000800 <HAL_UART_RxCpltCallback+0x68>)
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_UART_RxCpltCallback+0x70>)
 80007f0:	f003 fa45 	bl	8003c7e <HAL_UART_Receive_IT>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20004a18 	.word	0x20004a18
 8000800:	20004a4c 	.word	0x20004a4c
 8000804:	20004a7c 	.word	0x20004a7c
 8000808:	200049c0 	.word	0x200049c0

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b08d      	sub	sp, #52	; 0x34
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f001 f9fb 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f8e3 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f995 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081e:	f000 f969 	bl	8000af4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000822:	f000 f941 	bl	8000aa8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	494e      	ldr	r1, [pc, #312]	; (8000964 <main+0x158>)
 800082a:	484f      	ldr	r0, [pc, #316]	; (8000968 <main+0x15c>)
 800082c:	f003 fa27 	bl	8003c7e <HAL_UART_Receive_IT>
  //TODO: Init timer config strucutres
  osTimerFunc_t timerCbArr[NUM_TIMERS] = {ledTimerCb1, ledTimerCb2, ledTimerCb3, ledTimerCb4};
 8000830:	4b4e      	ldr	r3, [pc, #312]	; (800096c <main+0x160>)
 8000832:	f107 0418 	add.w	r4, r7, #24
 8000836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (int i = 0; i < NUM_TIMERS; ++i)
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000840:	e013      	b.n	800086a <main+0x5e>
  {
	 timerConfigArr[i].timerCb =  timerCbArr[i];
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800084a:	4413      	add	r3, r2
 800084c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000850:	4947      	ldr	r1, [pc, #284]	; (8000970 <main+0x164>)
 8000852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000854:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	 timerConfigArr[i].mode = osTimerPeriodic;
 8000858:	4a45      	ldr	r2, [pc, #276]	; (8000970 <main+0x164>)
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	4413      	add	r3, r2
 8000860:	2201      	movs	r2, #1
 8000862:	711a      	strb	r2, [r3, #4]
  for (int i = 0; i < NUM_TIMERS; ++i)
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	3301      	adds	r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	2b03      	cmp	r3, #3
 800086e:	dde8      	ble.n	8000842 <main+0x36>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000870:	f004 f922 	bl	8004ab8 <osKernelInitialize>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ledTimer */
  //TODO: Make function out of this.
  for( int i = 0; i < sizeof(timerConfigArr)/sizeof(timerConfigArr[0]); ++i)
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
 8000878:	e017      	b.n	80008aa <main+0x9e>
  {
    //ledTimerHandle = osTimerNew(ledTimerCb, osTimerPeriodic, NULL, &ledTimer_attributes);
	ledTimerHandleArr[i] = osTimerNew(timerConfigArr[i].timerCb, timerConfigArr[i].mode , NULL, &ledTimer_attributes[i]);
 800087a:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <main+0x164>)
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000882:	4a3b      	ldr	r2, [pc, #236]	; (8000970 <main+0x164>)
 8000884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4413      	add	r3, r2
 800088a:	7919      	ldrb	r1, [r3, #4]
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	4a38      	ldr	r2, [pc, #224]	; (8000974 <main+0x168>)
 8000892:	4413      	add	r3, r2
 8000894:	2200      	movs	r2, #0
 8000896:	f004 fa1b 	bl	8004cd0 <osTimerNew>
 800089a:	4602      	mov	r2, r0
 800089c:	4936      	ldr	r1, [pc, #216]	; (8000978 <main+0x16c>)
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( int i = 0; i < sizeof(timerConfigArr)/sizeof(timerConfigArr[0]); ++i)
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	3301      	adds	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d9e4      	bls.n	800087a <main+0x6e>
  }
  rtcTimerHandle = osTimerNew(rtcReportingCb, osTimerPeriodic, (void *)&hrtc, &rtc_timer_attr);
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <main+0x170>)
 80008b2:	4a33      	ldr	r2, [pc, #204]	; (8000980 <main+0x174>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	4833      	ldr	r0, [pc, #204]	; (8000984 <main+0x178>)
 80008b8:	f004 fa0a 	bl	8004cd0 <osTimerNew>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a32      	ldr	r2, [pc, #200]	; (8000988 <main+0x17c>)
 80008c0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (200, sizeof(char *), &printQueue_attributes);
 80008c2:	4a32      	ldr	r2, [pc, #200]	; (800098c <main+0x180>)
 80008c4:	2104      	movs	r1, #4
 80008c6:	20c8      	movs	r0, #200	; 0xc8
 80008c8:	f004 fae3 	bl	8004e92 <osMessageQueueNew>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a30      	ldr	r2, [pc, #192]	; (8000990 <main+0x184>)
 80008d0:	6013      	str	r3, [r2, #0]

  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (32, sizeof(uint8_t), &commandQueue_attributes);
 80008d2:	4a30      	ldr	r2, [pc, #192]	; (8000994 <main+0x188>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	2020      	movs	r0, #32
 80008d8:	f004 fadb 	bl	8004e92 <osMessageQueueNew>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <main+0x18c>)
 80008e0:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  rtcQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue03_attributes);
 80008e2:	4a2e      	ldr	r2, [pc, #184]	; (800099c <main+0x190>)
 80008e4:	2102      	movs	r1, #2
 80008e6:	2010      	movs	r0, #16
 80008e8:	f004 fad3 	bl	8004e92 <osMessageQueueNew>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <main+0x194>)
 80008f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printTask */
  printTaskHandle = osThreadNew(print_task, NULL, &printTask_attributes);
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <main+0x198>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	482c      	ldr	r0, [pc, #176]	; (80009a8 <main+0x19c>)
 80008f8:	f004 f928 	bl	8004b4c <osThreadNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <main+0x1a0>)
 8000900:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(menuTask, NULL, &menu_task_attributes);
 8000902:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <main+0x1a4>)
 8000904:	2100      	movs	r1, #0
 8000906:	482b      	ldr	r0, [pc, #172]	; (80009b4 <main+0x1a8>)
 8000908:	f004 f920 	bl	8004b4c <osThreadNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <main+0x1ac>)
 8000910:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(ledTask, NULL, &led_task_attributes);
 8000912:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <main+0x1b0>)
 8000914:	2100      	movs	r1, #0
 8000916:	482a      	ldr	r0, [pc, #168]	; (80009c0 <main+0x1b4>)
 8000918:	f004 f918 	bl	8004b4c <osThreadNew>
 800091c:	4603      	mov	r3, r0
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <main+0x1b8>)
 8000920:	6013      	str	r3, [r2, #0]

  /* creation of commandHandling */
  commandHandlingHandle = osThreadNew(commandTask, NULL, &commandHandling_attributes);
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <main+0x1bc>)
 8000924:	2100      	movs	r1, #0
 8000926:	4829      	ldr	r0, [pc, #164]	; (80009cc <main+0x1c0>)
 8000928:	f004 f910 	bl	8004b4c <osThreadNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <main+0x1c4>)
 8000930:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(rtcTask, NULL, &rtc_task_attributes);
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <main+0x1c8>)
 8000934:	2100      	movs	r1, #0
 8000936:	4828      	ldr	r0, [pc, #160]	; (80009d8 <main+0x1cc>)
 8000938:	f004 f908 	bl	8004b4c <osThreadNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <main+0x1d0>)
 8000940:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  RTC_TimeTypeDef s_time;
  s_time.Seconds = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	71bb      	strb	r3, [r7, #6]
  s_time.Minutes = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	717b      	strb	r3, [r7, #5]
  s_time.Hours = 4;
 800094a:	2304      	movs	r3, #4
 800094c:	713b      	strb	r3, [r7, #4]
  s_time.TimeFormat = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
  HAL_RTC_SetTime(&hrtc, &s_time, RTC_FORMAT_BIN);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <main+0x174>)
 800095a:	f002 fe04 	bl	8003566 <HAL_RTC_SetTime>
// HAL_RTC_GetTime(&hrtc, &s_time, RTC_FORMAT_BIN);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800095e:	f004 f8cf 	bl	8004b00 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0x156>
 8000964:	20004a4c 	.word	0x20004a4c
 8000968:	200049c0 	.word	0x200049c0
 800096c:	080083cc 	.word	0x080083cc
 8000970:	20004a5c 	.word	0x20004a5c
 8000974:	0800864c 	.word	0x0800864c
 8000978:	20004a08 	.word	0x20004a08
 800097c:	0800868c 	.word	0x0800868c
 8000980:	20004a2c 	.word	0x20004a2c
 8000984:	0800194d 	.word	0x0800194d
 8000988:	20004a04 	.word	0x20004a04
 800098c:	08008750 	.word	0x08008750
 8000990:	200049b8 	.word	0x200049b8
 8000994:	08008768 	.word	0x08008768
 8000998:	20004a18 	.word	0x20004a18
 800099c:	08008780 	.word	0x08008780
 80009a0:	200049bc 	.word	0x200049bc
 80009a4:	0800869c 	.word	0x0800869c
 80009a8:	08000c19 	.word	0x08000c19
 80009ac:	20004a50 	.word	0x20004a50
 80009b0:	080086c0 	.word	0x080086c0
 80009b4:	08000c69 	.word	0x08000c69
 80009b8:	20004a58 	.word	0x20004a58
 80009bc:	080086e4 	.word	0x080086e4
 80009c0:	0800052d 	.word	0x0800052d
 80009c4:	20004a1c 	.word	0x20004a1c
 80009c8:	08008708 	.word	0x08008708
 80009cc:	08000d05 	.word	0x08000d05
 80009d0:	20004a7c 	.word	0x20004a7c
 80009d4:	0800872c 	.word	0x0800872c
 80009d8:	08000fd5 	.word	0x08000fd5
 80009dc:	20004a54 	.word	0x20004a54

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2234      	movs	r2, #52	; 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fa62 	bl	8007eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <SystemClock_Config+0xc0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <SystemClock_Config+0xc0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SystemClock_Config+0xc0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <SystemClock_Config+0xc4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <SystemClock_Config+0xc4>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <SystemClock_Config+0xc4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a40:	230a      	movs	r3, #10
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fa53 	bl	8002f08 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a68:	f000 fb24 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fc9e 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a92:	f000 fb0f 	bl	80010b4 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_RTC_Init+0x44>)
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_RTC_Init+0x48>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_RTC_Init+0x44>)
 8000ab4:	2240      	movs	r2, #64	; 0x40
 8000ab6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_RTC_Init+0x44>)
 8000aba:	227f      	movs	r2, #127	; 0x7f
 8000abc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_RTC_Init+0x44>)
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_RTC_Init+0x44>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_RTC_Init+0x44>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_RTC_Init+0x44>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_RTC_Init+0x44>)
 8000ad8:	f002 fcb4 	bl	8003444 <HAL_RTC_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ae2:	f000 fae7 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20004a2c 	.word	0x20004a2c
 8000af0:	40002800 	.word	0x40002800

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f002 ffc8 	bl	8003ac0 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 fabd 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200049c0 	.word	0x200049c0
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <MX_GPIO_Init+0xc8>)
 8000bb8:	f001 fbd2 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000bc4:	f001 fbcc 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_GPIO_Init+0xc8>)
 8000be0:	f001 fa2a 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000be4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000bfe:	f001 fa1b 	bl	8002038 <HAL_GPIO_Init>

}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020400 	.word	0x40020400

08000c18 <print_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_print_task */
void print_task(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char *msg = (char *)malloc(200);
 8000c20:	20c8      	movs	r0, #200	; 0xc8
 8000c22:	f007 f933 	bl	8007e8c <malloc>
 8000c26:	4603      	mov	r3, r0
 8000c28:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	xQueueReceive(printQueueHandle, &msg, portMAX_DELAY);
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <print_task+0x48>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f107 0108 	add.w	r1, r7, #8
 8000c32:	f04f 32ff 	mov.w	r2, #4294967295
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fd5e 	bl	80056f8 <xQueueReceive>
	int len = strlen(msg);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff faf0 	bl	8000224 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, msg, len, 1000);
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <print_task+0x4c>)
 8000c54:	f002 ff81 	bl	8003b5a <HAL_UART_Transmit>
    osDelay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f004 f809 	bl	8004c70 <osDelay>
  {
 8000c5e:	e7e4      	b.n	8000c2a <print_task+0x12>
 8000c60:	200049b8 	.word	0x200049b8
 8000c64:	200049c0 	.word	0x200049c0

08000c68 <menuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_menuTask */
void menuTask(void *argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c74:	f003 fffc 	bl	8004c70 <osDelay>
    int i;
    for (i = 0; i < 7; ++i)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e00d      	b.n	8000c9a <menuTask+0x32>
    {
      xQueueSendToBack(printQueueHandle, &menu_msg[i], portMAX_DELAY);
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <menuTask+0x44>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <menuTask+0x48>)
 8000c88:	1899      	adds	r1, r3, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	f004 fb98 	bl	80053c4 <xQueueGenericSend>
    for (i = 0; i < 7; ++i)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	ddee      	ble.n	8000c7e <menuTask+0x16>
    }
    ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f005 fe5b 	bl	8006960 <ulTaskNotifyTake>
  {
 8000caa:	e7e1      	b.n	8000c70 <menuTask+0x8>
 8000cac:	200049b8 	.word	0x200049b8
 8000cb0:	08008798 	.word	0x08008798

08000cb4 <setCommandTaskState>:
* @retval None
*/
/* USER CODE END Header_ledTask */

int setCommandTaskState(state newState)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  int err;
  err = (newState >= MAIN_MENU && newState <= EXIT) ? 0 : -1;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d801      	bhi.n	8000cc8 <setCommandTaskState+0x14>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e001      	b.n	8000ccc <setCommandTaskState+0x18>
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	60fb      	str	r3, [r7, #12]
  if (!err)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <setCommandTaskState+0x26>
    current_state = newState;
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <setCommandTaskState+0x48>)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	7013      	strb	r3, [r2, #0]

  if(current_state == MAIN_MENU)
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <setCommandTaskState+0x48>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <setCommandTaskState+0x3c>
  {
    xTaskNotifyGive(menu_taskHandle);
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <setCommandTaskState+0x4c>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	2202      	movs	r2, #2
 8000cea:	2100      	movs	r1, #0
 8000cec:	f005 fe80 	bl	80069f0 <xTaskGenericNotify>
  }

  return err;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	20004a58 	.word	0x20004a58

08000d04 <commandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandTask */
void commandTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0a2      	sub	sp, #136	; 0x88
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  char recv_cmd[100];

  for(;;)
  {
	//receiveCommands(commandQueueHandle, recv_cmd);
	i = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	//TODO: (URGENT) Convert this to one function
	do
    {
	   xQueueReceive(commandQueueHandle, &recv_cmd[i], portMAX_DELAY);
 8000d12:	4b8d      	ldr	r3, [pc, #564]	; (8000f48 <commandTask+0x244>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	f107 0208 	add.w	r2, r7, #8
 8000d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d1e:	4413      	add	r3, r2
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	4619      	mov	r1, r3
 8000d26:	f004 fce7 	bl	80056f8 <xQueueReceive>
	   ++i;
 8000d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }while(uxQueueMessagesWaiting(commandQueueHandle) > 0);
 8000d34:	4b84      	ldr	r3, [pc, #528]	; (8000f48 <commandTask+0x244>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fdbd 	bl	80058b8 <uxQueueMessagesWaiting>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e6      	bne.n	8000d12 <commandTask+0xe>

    recv_cmd[i - 1] = '\0';
 8000d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000d4e:	4413      	add	r3, r2
 8000d50:	2200      	movs	r2, #0
 8000d52:	f803 2c80 	strb.w	r2, [r3, #-128]

	switch(current_state) {
 8000d56:	4b7d      	ldr	r3, [pc, #500]	; (8000f4c <commandTask+0x248>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	f000 80d1 	beq.w	8000f02 <commandTask+0x1fe>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	dcd3      	bgt.n	8000d0c <commandTask+0x8>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <commandTask+0x6a>
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d04c      	beq.n	8000e06 <commandTask+0x102>
 8000d6c:	e0eb      	b.n	8000f46 <commandTask+0x242>
	   case MAIN_MENU :
		   if(strcmp(recv_cmd, "0") == 0)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4977      	ldr	r1, [pc, #476]	; (8000f50 <commandTask+0x24c>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa4b 	bl	8000210 <strcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10a      	bne.n	8000d96 <commandTask+0x92>
		   {
	         current_state = LED_MENU;
 8000d80:	4b72      	ldr	r3, [pc, #456]	; (8000f4c <commandTask+0x248>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
	         xTaskNotifyGive(led_taskHandle);
 8000d86:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <commandTask+0x250>)
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f005 fe2e 	bl	80069f0 <xTaskGenericNotify>
             char *test_str = "Invalid Option\n";
	    	 int len = strlen(test_str);
             HAL_UART_Transmit(&huart2, test_str, len, 1000);
  		     xTaskNotifyGive(menu_taskHandle);
		   }
		   break;
 8000d94:	e0d7      	b.n	8000f46 <commandTask+0x242>
		   else if(strcmp(recv_cmd, "1") == 0)
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	496f      	ldr	r1, [pc, #444]	; (8000f58 <commandTask+0x254>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fa37 	bl	8000210 <strcmp>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10a      	bne.n	8000dbe <commandTask+0xba>
             current_state = RTC_MENU;
 8000da8:	4b68      	ldr	r3, [pc, #416]	; (8000f4c <commandTask+0x248>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
             xTaskNotifyGive(rtc_taskHandle);
 8000dae:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <commandTask+0x258>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	2202      	movs	r2, #2
 8000db6:	2100      	movs	r1, #0
 8000db8:	f005 fe1a 	bl	80069f0 <xTaskGenericNotify>
		   break;
 8000dbc:	e0c3      	b.n	8000f46 <commandTask+0x242>
		   else if(strcmp(recv_cmd, "2") == 0)
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4967      	ldr	r1, [pc, #412]	; (8000f60 <commandTask+0x25c>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa23 	bl	8000210 <strcmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <commandTask+0xd4>
             current_state = EXIT;
 8000dd0:	4b5e      	ldr	r3, [pc, #376]	; (8000f4c <commandTask+0x248>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
		   break;
 8000dd6:	e0b6      	b.n	8000f46 <commandTask+0x242>
             char *test_str = "Invalid Option\n";
 8000dd8:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <commandTask+0x260>)
 8000dda:	673b      	str	r3, [r7, #112]	; 0x70
	    	 int len = strlen(test_str);
 8000ddc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000dde:	f7ff fa21 	bl	8000224 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	66fb      	str	r3, [r7, #108]	; 0x6c
             HAL_UART_Transmit(&huart2, test_str, len, 1000);
 8000de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000df0:	485d      	ldr	r0, [pc, #372]	; (8000f68 <commandTask+0x264>)
 8000df2:	f002 feb2 	bl	8003b5a <HAL_UART_Transmit>
  		     xTaskNotifyGive(menu_taskHandle);
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <commandTask+0x268>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f005 fdf6 	bl	80069f0 <xTaskGenericNotify>
		   break;
 8000e04:	e09f      	b.n	8000f46 <commandTask+0x242>
	   case LED_MENU:
		   if(strcmp(recv_cmd, "none") == 0)
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4959      	ldr	r1, [pc, #356]	; (8000f70 <commandTask+0x26c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9ff 	bl	8000210 <strcmp>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d104      	bne.n	8000e22 <commandTask+0x11e>
		   {
			     stopTimers();
 8000e18:	f7ff fbaa 	bl	8000570 <stopTimers>
			     ledSetAllLow();
 8000e1c:	f7ff fca8 	bl	8000770 <ledSetAllLow>
 8000e20:	e064      	b.n	8000eec <commandTask+0x1e8>
		   }
		   else if(strcmp(recv_cmd, "e1") == 0)
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4953      	ldr	r1, [pc, #332]	; (8000f74 <commandTask+0x270>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9f1 	bl	8000210 <strcmp>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10b      	bne.n	8000e4c <commandTask+0x148>
		   {
			     stopTimers();
 8000e34:	f7ff fb9c 	bl	8000570 <stopTimers>
			     ledSetAllLow();
 8000e38:	f7ff fc9a 	bl	8000770 <ledSetAllLow>
			     osTimerStart(ledTimerHandleArr[0], pdMS_TO_TICKS(500));
 8000e3c:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <commandTask+0x274>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 ffbf 	bl	8004dc8 <osTimerStart>
 8000e4a:	e04f      	b.n	8000eec <commandTask+0x1e8>
			     //TODO: COnsider moving this logic to LED Task
		   }
		   else if(strcmp(recv_cmd, "e2") == 0)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	494a      	ldr	r1, [pc, #296]	; (8000f7c <commandTask+0x278>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f9dc 	bl	8000210 <strcmp>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d111      	bne.n	8000e82 <commandTask+0x17e>
		   {
			     stopTimers();
 8000e5e:	f7ff fb87 	bl	8000570 <stopTimers>
			     ledSetAllLow();
 8000e62:	f7ff fc85 	bl	8000770 <ledSetAllLow>
			     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_13, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e6c:	4844      	ldr	r0, [pc, #272]	; (8000f80 <commandTask+0x27c>)
 8000e6e:	f001 fa77 	bl	8002360 <HAL_GPIO_WritePin>
			     osTimerStart(ledTimerHandleArr[1], pdMS_TO_TICKS(500));
 8000e72:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <commandTask+0x274>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ffa4 	bl	8004dc8 <osTimerStart>
 8000e80:	e034      	b.n	8000eec <commandTask+0x1e8>
		   }
		   else if(strcmp(recv_cmd, "e3") == 0)
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	493f      	ldr	r1, [pc, #252]	; (8000f84 <commandTask+0x280>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9c1 	bl	8000210 <strcmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d109      	bne.n	8000ea8 <commandTask+0x1a4>
		   {
			     stopTimers();
 8000e94:	f7ff fb6c 	bl	8000570 <stopTimers>
			     osTimerStart(ledTimerHandleArr[2], pdMS_TO_TICKS(500));
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <commandTask+0x274>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 ff91 	bl	8004dc8 <osTimerStart>
 8000ea6:	e021      	b.n	8000eec <commandTask+0x1e8>
		   }
		   else if(strcmp(recv_cmd, "e4") == 0)
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4936      	ldr	r1, [pc, #216]	; (8000f88 <commandTask+0x284>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9ae 	bl	8000210 <strcmp>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d109      	bne.n	8000ece <commandTask+0x1ca>
		   {
			     stopTimers();
 8000eba:	f7ff fb59 	bl	8000570 <stopTimers>
			     osTimerStart(ledTimerHandleArr[3], pdMS_TO_TICKS(500));
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <commandTask+0x274>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 ff7e 	bl	8004dc8 <osTimerStart>
 8000ecc:	e00e      	b.n	8000eec <commandTask+0x1e8>
		   }
		   else
		   {
		     char *test_str = "Invalid Option\n";
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <commandTask+0x260>)
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
		     int len = strlen(test_str);
 8000ed2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000ed4:	f7ff f9a6 	bl	8000224 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	677b      	str	r3, [r7, #116]	; 0x74
		     HAL_UART_Transmit(&huart2, test_str, len, 1000);
 8000edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <commandTask+0x264>)
 8000ee8:	f002 fe37 	bl	8003b5a <HAL_UART_Transmit>
		   }
		   xTaskNotifyGive(menu_taskHandle);
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <commandTask+0x268>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f005 fd7b 	bl	80069f0 <xTaskGenericNotify>
		   current_state = MAIN_MENU;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <commandTask+0x248>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
		   break;
 8000f00:	e021      	b.n	8000f46 <commandTask+0x242>
	   case RTC_MENU:
		   //Make this a function.
		   str_len = (int)strlen(recv_cmd);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f98c 	bl	8000224 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
		   for (idx = 0; idx < str_len; ++idx)
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f16:	e010      	b.n	8000f3a <commandTask+0x236>
		   {
		     xQueueSendToBack(rtcQueueHandle, &recv_cmd[idx], portMAX_DELAY);
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <commandTask+0x288>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f24:	18d1      	adds	r1, r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	f004 fa4a 	bl	80053c4 <xQueueGenericSend>
		   for (idx = 0; idx < str_len; ++idx)
 8000f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f34:	3301      	adds	r3, #1
 8000f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbe9      	blt.n	8000f18 <commandTask+0x214>
		   }
		   //xTaskNotifyGive(menu_taskHandle);
		   //current_state = MAIN_MENU;
		   break;
 8000f44:	bf00      	nop
	i = 0;
 8000f46:	e6e1      	b.n	8000d0c <commandTask+0x8>
 8000f48:	20004a18 	.word	0x20004a18
 8000f4c:	20000098 	.word	0x20000098
 8000f50:	080083dc 	.word	0x080083dc
 8000f54:	20004a1c 	.word	0x20004a1c
 8000f58:	080083e0 	.word	0x080083e0
 8000f5c:	20004a54 	.word	0x20004a54
 8000f60:	080083e4 	.word	0x080083e4
 8000f64:	080083e8 	.word	0x080083e8
 8000f68:	200049c0 	.word	0x200049c0
 8000f6c:	20004a58 	.word	0x20004a58
 8000f70:	080083f8 	.word	0x080083f8
 8000f74:	08008400 	.word	0x08008400
 8000f78:	20004a08 	.word	0x20004a08
 8000f7c:	08008404 	.word	0x08008404
 8000f80:	40020400 	.word	0x40020400
 8000f84:	08008408 	.word	0x08008408
 8000f88:	0800840c 	.word	0x0800840c
 8000f8c:	200049bc 	.word	0x200049bc

08000f90 <recvMsgFromQueue>:
  }
  /* USER CODE END commandTask */
}

void recvMsgFromQueue(QueueHandle_t queueHandle, char *buf)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  int count = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  do
  {
	//TODO: Error handling of return value
    xQueueReceive(queueHandle, &buf[count], portMAX_DELAY);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f004 fba4 	bl	80056f8 <xQueueReceive>
	++count;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
  }while(uxQueueMessagesWaiting(queueHandle) > 0);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f004 fc7e 	bl	80058b8 <uxQueueMessagesWaiting>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ed      	bne.n	8000f9e <recvMsgFromQueue+0xe>
  buf[count] = '\0';
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <rtcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rtcTask */
void rtcTask(void *argument)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rtcTask */
  /* Infinite loop */
  int recv_val;
  char *recv_cmd = malloc(30);
 8000fdc:	201e      	movs	r0, #30
 8000fde:	f006 ff55 	bl	8007e8c <malloc>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	617b      	str	r3, [r7, #20]

  // Todo: Continue deferring RTC processing work to this task, create subroutines to clean up as necessary.
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fea:	2001      	movs	r0, #1
 8000fec:	f005 fcb8 	bl	8006960 <ulTaskNotifyTake>
	  rtcPrintInitMessage(&hrtc);
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <rtcTask+0xbc>)
 8000ff2:	f000 f9e3 	bl	80013bc <rtcPrintInitMessage>

      recvMsgFromQueue(rtcQueueHandle, recv_cmd);
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <rtcTask+0xc0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6979      	ldr	r1, [r7, #20]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffc7 	bl	8000f90 <recvMsgFromQueue>
      recv_val = atoi(recv_cmd);
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f006 fefa 	bl	8007dfc <atoi>
 8001008:	6138      	str	r0, [r7, #16]

	   if (strcmp(recv_cmd, "0") == 0)
 800100a:	4923      	ldr	r1, [pc, #140]	; (8001098 <rtcTask+0xc4>)
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff f8ff 	bl	8000210 <strcmp>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <rtcTask+0x4c>
	   {
         configureRTCTime(&hrtc);
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <rtcTask+0xbc>)
 800101a:	f000 fa01 	bl	8001420 <configureRTCTime>
 800101e:	e7e2      	b.n	8000fe6 <rtcTask+0x12>
	   }
	   else if (strcmp(recv_cmd, "1") == 0)
 8001020:	491e      	ldr	r1, [pc, #120]	; (800109c <rtcTask+0xc8>)
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff f8f4 	bl	8000210 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <rtcTask+0x62>
	   {
         configureRTCDate(&hrtc);
 800102e:	4818      	ldr	r0, [pc, #96]	; (8001090 <rtcTask+0xbc>)
 8001030:	f000 fb72 	bl	8001718 <configureRTCDate>
 8001034:	e7d7      	b.n	8000fe6 <rtcTask+0x12>
		 //setCommandTaskState(MAIN_MENU);
	   }
	   else if (strcmp(recv_cmd, "2") == 0)
 8001036:	491a      	ldr	r1, [pc, #104]	; (80010a0 <rtcTask+0xcc>)
 8001038:	6978      	ldr	r0, [r7, #20]
 800103a:	f7ff f8e9 	bl	8000210 <strcmp>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10a      	bne.n	800105a <rtcTask+0x86>
	   {
         // Enable reporting
		 setCommandTaskState(MAIN_MENU);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fe35 	bl	8000cb4 <setCommandTaskState>
		 osTimerStart(rtcTimerHandle, pdMS_TO_TICKS(4000));
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <rtcTask+0xd0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 feb8 	bl	8004dc8 <osTimerStart>
 8001058:	e7c5      	b.n	8000fe6 <rtcTask+0x12>
	   }
	   else if (strcmp(recv_cmd, "3") == 0)
 800105a:	4913      	ldr	r1, [pc, #76]	; (80010a8 <rtcTask+0xd4>)
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff f8d7 	bl	8000210 <strcmp>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <rtcTask+0x9c>
	   {
	     setCommandTaskState(MAIN_MENU);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fe23 	bl	8000cb4 <setCommandTaskState>
 800106e:	e7ba      	b.n	8000fe6 <rtcTask+0x12>
	   }
	   else
	   {
	     char *test_str = "Invalid Option\n";
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <rtcTask+0xd8>)
 8001072:	60fb      	str	r3, [r7, #12]
		 int len = strlen(test_str);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff f8d5 	bl	8000224 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	60bb      	str	r3, [r7, #8]
		 HAL_UART_Transmit(&huart2, test_str, len, 1000);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	b29a      	uxth	r2, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <rtcTask+0xdc>)
 800108a:	f002 fd66 	bl	8003b5a <HAL_UART_Transmit>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800108e:	e7aa      	b.n	8000fe6 <rtcTask+0x12>
 8001090:	20004a2c 	.word	0x20004a2c
 8001094:	200049bc 	.word	0x200049bc
 8001098:	080083dc 	.word	0x080083dc
 800109c:	080083e0 	.word	0x080083e0
 80010a0:	080083e4 	.word	0x080083e4
 80010a4:	20004a04 	.word	0x20004a04
 80010a8:	08008410 	.word	0x08008410
 80010ac:	080083e8 	.word	0x080083e8
 80010b0:	200049c0 	.word	0x200049c0

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <rtcFormatTimeAndDate>:
        "Enable Reporting:     ----> 2\n",
        "Exit                  ----> 3\n"};
static char *rtcFormatTimeAndDate(RTC_HandleTypeDef *hrtc);

static char *rtcFormatTimeAndDate(RTC_HandleTypeDef *hrtc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  int idx;
  char buf[20];
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f002 fb11 	bl	80036f8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fc0f 	bl	8003902 <HAL_RTC_GetDate>
  //TODO: Add AM/PM and Date
  //int ret = snprintf(rtc_format_str, 20, "%02d:%02d:%02d      %02d-%02d-20%02d\n",
	//	   sTime.Hours, sTime.Minutes ,sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);

  if(sTime.Hours < 10)
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d80c      	bhi.n	8001104 <rtcFormatTimeAndDate+0x44>
  {
	buf[0] = '0';
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
    itoa(sTime.Hours, &buf[1], 10);
 80010f0:	7b3b      	ldrb	r3, [r7, #12]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	3301      	adds	r3, #1
 80010fa:	220a      	movs	r2, #10
 80010fc:	4619      	mov	r1, r3
 80010fe:	f006 fec3 	bl	8007e88 <itoa>
 8001102:	e007      	b.n	8001114 <rtcFormatTimeAndDate+0x54>
  }
  else
  {
    itoa(sTime.Hours, buf, 10);
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	4618      	mov	r0, r3
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	220a      	movs	r2, #10
 800110e:	4619      	mov	r1, r3
 8001110:	f006 feba 	bl	8007e88 <itoa>
  }
  strcpy(rtc_format_str, buf);
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4619      	mov	r1, r3
 800111a:	48a5      	ldr	r0, [pc, #660]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800111c:	f006 ff3e 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 8001120:	48a3      	ldr	r0, [pc, #652]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001122:	f7ff f87f 	bl	8000224 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = ':';
 800112a:	4aa1      	ldr	r2, [pc, #644]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	4413      	add	r3, r2
 8001130:	223a      	movs	r2, #58	; 0x3a
 8001132:	701a      	strb	r2, [r3, #0]
  ++idx;
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	3301      	adds	r3, #1
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '\0';
 800113a:	4a9d      	ldr	r2, [pc, #628]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

  if(sTime.Minutes < 10)
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	2b09      	cmp	r3, #9
 8001148:	d80c      	bhi.n	8001164 <rtcFormatTimeAndDate+0xa4>
  {
    buf[0] = '0';
 800114a:	2330      	movs	r3, #48	; 0x30
 800114c:	f887 3020 	strb.w	r3, [r7, #32]
	itoa(sTime.Minutes, &buf[1], 10);
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	4618      	mov	r0, r3
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	3301      	adds	r3, #1
 800115a:	220a      	movs	r2, #10
 800115c:	4619      	mov	r1, r3
 800115e:	f006 fe93 	bl	8007e88 <itoa>
 8001162:	e007      	b.n	8001174 <rtcFormatTimeAndDate+0xb4>
  }
  else
  {
    itoa(sTime.Hours, buf, 10);
 8001164:	7b3b      	ldrb	r3, [r7, #12]
 8001166:	4618      	mov	r0, r3
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	220a      	movs	r2, #10
 800116e:	4619      	mov	r1, r3
 8001170:	f006 fe8a 	bl	8007e88 <itoa>
  }

  strcpy(&rtc_format_str[idx], buf);
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	4a8e      	ldr	r2, [pc, #568]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001178:	4413      	add	r3, r2
 800117a:	f107 0220 	add.w	r2, r7, #32
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f006 ff0b 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 8001186:	488a      	ldr	r0, [pc, #552]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001188:	f7ff f84c 	bl	8000224 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = ':';
 8001190:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	4413      	add	r3, r2
 8001196:	223a      	movs	r2, #58	; 0x3a
 8001198:	701a      	strb	r2, [r3, #0]
  ++idx;
 800119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119c:	3301      	adds	r3, #1
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '\0';
 80011a0:	4a83      	ldr	r2, [pc, #524]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

  if(sTime.Seconds < 10)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d80c      	bhi.n	80011ca <rtcFormatTimeAndDate+0x10a>
  {
    buf[0] = '0';
 80011b0:	2330      	movs	r3, #48	; 0x30
 80011b2:	f887 3020 	strb.w	r3, [r7, #32]
	itoa(sTime.Seconds, &buf[1], 10);
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	3301      	adds	r3, #1
 80011c0:	220a      	movs	r2, #10
 80011c2:	4619      	mov	r1, r3
 80011c4:	f006 fe60 	bl	8007e88 <itoa>
 80011c8:	e007      	b.n	80011da <rtcFormatTimeAndDate+0x11a>
  }
  else
  {
    itoa(sTime.Seconds, buf, 10);
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	220a      	movs	r2, #10
 80011d4:	4619      	mov	r1, r3
 80011d6:	f006 fe57 	bl	8007e88 <itoa>
  }

  strcpy(&rtc_format_str[idx], buf);
 80011da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011dc:	4a74      	ldr	r2, [pc, #464]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80011de:	4413      	add	r3, r2
 80011e0:	f107 0220 	add.w	r2, r7, #32
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fed8 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 80011ec:	4870      	ldr	r0, [pc, #448]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80011ee:	f7ff f819 	bl	8000224 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34

  if(sTime.TimeFormat)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00a      	beq.n	8001212 <rtcFormatTimeAndDate+0x152>
  {
    strcat(rtc_format_str, " PM");
 80011fc:	486c      	ldr	r0, [pc, #432]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80011fe:	f7ff f811 	bl	8000224 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001208:	4413      	add	r3, r2
 800120a:	4a6a      	ldr	r2, [pc, #424]	; (80013b4 <rtcFormatTimeAndDate+0x2f4>)
 800120c:	6810      	ldr	r0, [r2, #0]
 800120e:	6018      	str	r0, [r3, #0]
 8001210:	e009      	b.n	8001226 <rtcFormatTimeAndDate+0x166>
  }
  else
  {
    strcat(rtc_format_str, " AM");
 8001212:	4867      	ldr	r0, [pc, #412]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001214:	f7ff f806 	bl	8000224 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800121e:	4413      	add	r3, r2
 8001220:	4a65      	ldr	r2, [pc, #404]	; (80013b8 <rtcFormatTimeAndDate+0x2f8>)
 8001222:	6810      	ldr	r0, [r2, #0]
 8001224:	6018      	str	r0, [r3, #0]
  }
  idx = strlen(rtc_format_str);
 8001226:	4862      	ldr	r0, [pc, #392]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001228:	f7fe fffc 	bl	8000224 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	637b      	str	r3, [r7, #52]	; 0x34

  rtc_format_str[idx] = ' ';
 8001230:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	4413      	add	r3, r2
 8001236:	2220      	movs	r2, #32
 8001238:	701a      	strb	r2, [r3, #0]
  ++idx;
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	3301      	adds	r3, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = ' ';
 8001240:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	4413      	add	r3, r2
 8001246:	2220      	movs	r2, #32
 8001248:	701a      	strb	r2, [r3, #0]
  ++idx;
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	3301      	adds	r3, #1
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = ' ';
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	4413      	add	r3, r2
 8001256:	2220      	movs	r2, #32
 8001258:	701a      	strb	r2, [r3, #0]
  ++idx;
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	3301      	adds	r3, #1
 800125e:	637b      	str	r3, [r7, #52]	; 0x34

  if(sDate.Date < 10)
 8001260:	7abb      	ldrb	r3, [r7, #10]
 8001262:	2b09      	cmp	r3, #9
 8001264:	d80c      	bhi.n	8001280 <rtcFormatTimeAndDate+0x1c0>
  {
    buf[0] = '0';
 8001266:	2330      	movs	r3, #48	; 0x30
 8001268:	f887 3020 	strb.w	r3, [r7, #32]
	itoa(sDate.Date, &buf[1], 10);
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	4618      	mov	r0, r3
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	3301      	adds	r3, #1
 8001276:	220a      	movs	r2, #10
 8001278:	4619      	mov	r1, r3
 800127a:	f006 fe05 	bl	8007e88 <itoa>
 800127e:	e007      	b.n	8001290 <rtcFormatTimeAndDate+0x1d0>
  }
  else
  {
    itoa(sDate.Date, buf, 10);
 8001280:	7abb      	ldrb	r3, [r7, #10]
 8001282:	4618      	mov	r0, r3
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	220a      	movs	r2, #10
 800128a:	4619      	mov	r1, r3
 800128c:	f006 fdfc 	bl	8007e88 <itoa>
  }
  strcpy(&rtc_format_str[idx], buf);
 8001290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001292:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001294:	4413      	add	r3, r2
 8001296:	f107 0220 	add.w	r2, r7, #32
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fe7d 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 80012a2:	4843      	ldr	r0, [pc, #268]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80012a4:	f7fe ffbe 	bl	8000224 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '-';
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	4413      	add	r3, r2
 80012b2:	222d      	movs	r2, #45	; 0x2d
 80012b4:	701a      	strb	r2, [r3, #0]
  ++idx;
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	3301      	adds	r3, #1
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '\0';
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	4413      	add	r3, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]

  if(sDate.Month < 10)
 80012c6:	7a7b      	ldrb	r3, [r7, #9]
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	d80c      	bhi.n	80012e6 <rtcFormatTimeAndDate+0x226>
  {
    buf[0] = '0';
 80012cc:	2330      	movs	r3, #48	; 0x30
 80012ce:	f887 3020 	strb.w	r3, [r7, #32]
	itoa(sDate.Month, &buf[1], 10);
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	3301      	adds	r3, #1
 80012dc:	220a      	movs	r2, #10
 80012de:	4619      	mov	r1, r3
 80012e0:	f006 fdd2 	bl	8007e88 <itoa>
 80012e4:	e007      	b.n	80012f6 <rtcFormatTimeAndDate+0x236>
  }
  else
  {
    itoa(sDate.Month, buf, 10);
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	220a      	movs	r2, #10
 80012f0:	4619      	mov	r1, r3
 80012f2:	f006 fdc9 	bl	8007e88 <itoa>
  }
  strcpy(&rtc_format_str[idx], buf);
 80012f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f8:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 80012fa:	4413      	add	r3, r2
 80012fc:	f107 0220 	add.w	r2, r7, #32
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f006 fe4a 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 8001308:	4829      	ldr	r0, [pc, #164]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800130a:	f7fe ff8b 	bl	8000224 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '-';
 8001312:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	4413      	add	r3, r2
 8001318:	222d      	movs	r2, #45	; 0x2d
 800131a:	701a      	strb	r2, [r3, #0]
  ++idx;
 800131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131e:	3301      	adds	r3, #1
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '2';
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	4413      	add	r3, r2
 8001328:	2232      	movs	r2, #50	; 0x32
 800132a:	701a      	strb	r2, [r3, #0]
  ++idx;
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3301      	adds	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  rtc_format_str[idx] = '0';
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 8001334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001336:	4413      	add	r3, r2
 8001338:	2230      	movs	r2, #48	; 0x30
 800133a:	701a      	strb	r2, [r3, #0]
  ++idx;
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	3301      	adds	r3, #1
 8001340:	637b      	str	r3, [r7, #52]	; 0x34

  if(sDate.Year < 10)
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d812      	bhi.n	800136e <rtcFormatTimeAndDate+0x2ae>
  {
    buf[0] = '0';
 8001348:	2330      	movs	r3, #48	; 0x30
 800134a:	f887 3020 	strb.w	r3, [r7, #32]
	itoa(sDate.Year, &buf[1], 10);
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	4618      	mov	r0, r3
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	3301      	adds	r3, #1
 8001358:	220a      	movs	r2, #10
 800135a:	4619      	mov	r1, r3
 800135c:	f006 fd94 	bl	8007e88 <itoa>
	buf[2] = '\n';
 8001360:	230a      	movs	r3, #10
 8001362:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buf[3] = '\0';
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800136c:	e00d      	b.n	800138a <rtcFormatTimeAndDate+0x2ca>
  }
  else
  {
    itoa(sDate.Year, buf, 10);
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	4618      	mov	r0, r3
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	220a      	movs	r2, #10
 8001378:	4619      	mov	r1, r3
 800137a:	f006 fd85 	bl	8007e88 <itoa>
	buf[2] = '\n';
 800137e:	230a      	movs	r3, #10
 8001380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buf[3] = '\0';
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  strcpy(&rtc_format_str[idx], buf);
 800138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800138e:	4413      	add	r3, r2
 8001390:	f107 0220 	add.w	r2, r7, #32
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fe00 	bl	8007f9c <strcpy>
  idx = strlen(rtc_format_str);
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
 800139e:	f7fe ff41 	bl	8000224 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    strcat(rtc_format_str, "AM\n");
  }
  idx = strlen(rtc_format_str);*/
  //rtc_format_str[idx] = '\0';

  return rtc_format_str;
 80013a6:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <rtcFormatTimeAndDate+0x2f0>)
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20004a80 	.word	0x20004a80
 80013b4:	08008520 	.word	0x08008520
 80013b8:	08008524 	.word	0x08008524

080013bc <rtcPrintInitMessage>:

void rtcPrintInitMessage(RTC_HandleTypeDef *hrtc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  char *rtc_str;

  for(int i = 0; i < 8; ++i)
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e01e      	b.n	8001408 <rtcPrintInitMessage+0x4c>
  {
    xQueueSendToBack(printQueueHandle, &rtc_msg[i], portMAX_DELAY);
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <rtcPrintInitMessage+0x5c>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <rtcPrintInitMessage+0x60>)
 80013d4:	1899      	adds	r1, r3, r2
 80013d6:	2300      	movs	r3, #0
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	f003 fff2 	bl	80053c4 <xQueueGenericSend>
    if(i == 3)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d10d      	bne.n	8001402 <rtcPrintInitMessage+0x46>
    {
      rtc_str = rtcFormatTimeAndDate(hrtc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe6a 	bl	80010c0 <rtcFormatTimeAndDate>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
      xQueueSendToBack(printQueueHandle, &rtc_str, portMAX_DELAY);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <rtcPrintInitMessage+0x5c>)
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	2300      	movs	r3, #0
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	f003 ffe1 	bl	80053c4 <xQueueGenericSend>
  for(int i = 0; i < 8; ++i)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b07      	cmp	r3, #7
 800140c:	dddd      	ble.n	80013ca <rtcPrintInitMessage+0xe>
    }
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200049b8 	.word	0x200049b8
 800141c:	080087b4 	.word	0x080087b4

08001420 <configureRTCTime>:

void configureRTCTime(RTC_HandleTypeDef *hrtc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09a      	sub	sp, #104	; 0x68
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  int recv_val, val, len;
  RTCTimeState state = HOUR;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint8_t recv_input = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  char *rtc_buf = (char *)malloc(40);
 8001434:	2028      	movs	r0, #40	; 0x28
 8001436:	f006 fd29 	bl	8007e8c <malloc>
 800143a:	4603      	mov	r3, r0
 800143c:	663b      	str	r3, [r7, #96]	; 0x60
  char *rtc_str = (char *)malloc(40);
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f006 fd24 	bl	8007e8c <malloc>
 8001444:	4603      	mov	r3, r0
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  char *test_str = (char *)malloc(40);
 8001448:	2028      	movs	r0, #40	; 0x28
 800144a:	f006 fd1f 	bl	8007e8c <malloc>
 800144e:	4603      	mov	r3, r0
 8001450:	65fb      	str	r3, [r7, #92]	; 0x5c
  char test_str[40];*/

  RTC_TimeTypeDef s_time, currentTime;
  char recv_buf[20];

  while(recv_input)
 8001452:	e143      	b.n	80016dc <configureRTCTime+0x2bc>
  {
    switch (state)
 8001454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001458:	2b03      	cmp	r3, #3
 800145a:	f200 813f 	bhi.w	80016dc <configureRTCTime+0x2bc>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <configureRTCTime+0x44>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001475 	.word	0x08001475
 8001468:	080014fd 	.word	0x080014fd
 800146c:	08001585 	.word	0x08001585
 8001470:	0800160d 	.word	0x0800160d
    {
      case HOUR:
        //TODO: Make into routine
        test_str = "Enter Hour (1-12): ";
 8001474:	4b9e      	ldr	r3, [pc, #632]	; (80016f0 <configureRTCTime+0x2d0>)
 8001476:	65fb      	str	r3, [r7, #92]	; 0x5c
        len = strlen(test_str);
 8001478:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800147a:	f7fe fed3 	bl	8000224 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	65bb      	str	r3, [r7, #88]	; 0x58
        HAL_UART_Transmit(&huart2, test_str, len, 1000);
 8001482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001484:	b29a      	uxth	r2, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800148c:	4899      	ldr	r0, [pc, #612]	; (80016f4 <configureRTCTime+0x2d4>)
 800148e:	f002 fb64 	bl	8003b5a <HAL_UART_Transmit>

        recvMsgFromQueue(rtcQueueHandle, rtc_buf);
 8001492:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <configureRTCTime+0x2d8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fd79 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_buf);
 800149e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80014a0:	f006 fcac 	bl	8007dfc <atoi>
 80014a4:	6578      	str	r0, [r7, #84]	; 0x54

        if(recv_val >= 1 && recv_val <= 12)
 80014a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	dd11      	ble.n	80014d0 <configureRTCTime+0xb0>
 80014ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	dc0e      	bgt.n	80014d0 <configureRTCTime+0xb0>
        {

          //TODO: Add logic for AM/PM
          s_time.Hours = recv_val;
 80014b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
          HAL_RTC_SetTime(hrtc, &s_time, RTC_FORMAT_BIN);
 80014ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f002 f84f 	bl	8003566 <HAL_RTC_SetTime>
          state = MINUTE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014ce:	e014      	b.n	80014fa <configureRTCTime+0xda>
      	  //xQueueSendToBack(printQueueHandle, &rtc_str, portMAX_DELAY);
		  //val = atoi(recv_buf);
        }
        else
        {
          test_str = "Invalid Option\n";
 80014d0:	4b8a      	ldr	r3, [pc, #552]	; (80016fc <configureRTCTime+0x2dc>)
 80014d2:	65fb      	str	r3, [r7, #92]	; 0x5c
	      int len = strlen(test_str);
 80014d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014d6:	f7fe fea5 	bl	8000224 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
          HAL_UART_Transmit(&huart2, test_str, len, 1000);
 80014de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014e8:	4882      	ldr	r0, [pc, #520]	; (80016f4 <configureRTCTime+0x2d4>)
 80014ea:	f002 fb36 	bl	8003b5a <HAL_UART_Transmit>
          recv_input = 0;// returns
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          setCommandTaskState(MAIN_MENU);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fbdd 	bl	8000cb4 <setCommandTaskState>
        }
        break;
 80014fa:	e0ef      	b.n	80016dc <configureRTCTime+0x2bc>
      case MINUTE:
        test_str = "Enter minutes (0-59): ";
 80014fc:	4b80      	ldr	r3, [pc, #512]	; (8001700 <configureRTCTime+0x2e0>)
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	    len = strlen(test_str);
 8001500:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001502:	f7fe fe8f 	bl	8000224 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
        HAL_UART_Transmit(&huart2, test_str, len, 1000);
 800150a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800150c:	b29a      	uxth	r2, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001514:	4877      	ldr	r0, [pc, #476]	; (80016f4 <configureRTCTime+0x2d4>)
 8001516:	f002 fb20 	bl	8003b5a <HAL_UART_Transmit>

        //Will block until queue receives from command handling task.
        recvMsgFromQueue(rtcQueueHandle, rtc_buf);
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <configureRTCTime+0x2d8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fd35 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_buf);
 8001526:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001528:	f006 fc68 	bl	8007dfc <atoi>
 800152c:	6578      	str	r0, [r7, #84]	; 0x54

        if(recv_val >= 0 && recv_val <= 59)
 800152e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	db11      	blt.n	8001558 <configureRTCTime+0x138>
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	2b3b      	cmp	r3, #59	; 0x3b
 8001538:	dc0e      	bgt.n	8001558 <configureRTCTime+0x138>
        {
          s_time.Minutes = recv_val;
 800153a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
          HAL_RTC_SetTime(hrtc, &s_time, RTC_FORMAT_BIN);
 8001542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f002 f80b 	bl	8003566 <HAL_RTC_SetTime>
          //TODO: Add AM/PM and Date
          //snprintf(rtc_str, 40, "Current Time: %02d:%02d:%02d\n", sTime.Hours, sTime.Minutes ,sTime.Seconds);
          //rtc_str[19] = '\0';
          //xQueueSendToBack(printQueueHandle, &rtc_str, portMAX_DELAY);
          //blocks until command queue pushes onto rtcQueueHandle
          state = SECOND;
 8001550:	2302      	movs	r3, #2
 8001552:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001556:	e014      	b.n	8001582 <configureRTCTime+0x162>

          //recv_input = 0;
        }
        else
        {
          test_str = "Invalid Option\n";
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <configureRTCTime+0x2dc>)
 800155a:	65fb      	str	r3, [r7, #92]	; 0x5c
  	      len = strlen(test_str);
 800155c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800155e:	f7fe fe61 	bl	8000224 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	65bb      	str	r3, [r7, #88]	; 0x58
          HAL_UART_Transmit(&huart2, test_str, len, 1000);
 8001566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001568:	b29a      	uxth	r2, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001570:	4860      	ldr	r0, [pc, #384]	; (80016f4 <configureRTCTime+0x2d4>)
 8001572:	f002 faf2 	bl	8003b5a <HAL_UART_Transmit>
          recv_input = 0;// returns
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          setCommandTaskState(MAIN_MENU);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fb99 	bl	8000cb4 <setCommandTaskState>
        }
        break;
 8001582:	e0ab      	b.n	80016dc <configureRTCTime+0x2bc>
      case SECOND:
        test_str = "Enter Seconds (0-59): ";
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <configureRTCTime+0x2e4>)
 8001586:	65fb      	str	r3, [r7, #92]	; 0x5c
  	    len = strlen(test_str);
 8001588:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800158a:	f7fe fe4b 	bl	8000224 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
  	    HAL_UART_Transmit(&huart2, test_str, len, 1000);
 8001592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001594:	b29a      	uxth	r2, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800159c:	4855      	ldr	r0, [pc, #340]	; (80016f4 <configureRTCTime+0x2d4>)
 800159e:	f002 fadc 	bl	8003b5a <HAL_UART_Transmit>

        recvMsgFromQueue(rtcQueueHandle, rtc_buf);
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <configureRTCTime+0x2d8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fcf1 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_buf);
 80015ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015b0:	f006 fc24 	bl	8007dfc <atoi>
 80015b4:	6578      	str	r0, [r7, #84]	; 0x54

    	if(recv_val >= 0 && recv_val <= 59)
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db11      	blt.n	80015e0 <configureRTCTime+0x1c0>
 80015bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015be:	2b3b      	cmp	r3, #59	; 0x3b
 80015c0:	dc0e      	bgt.n	80015e0 <configureRTCTime+0x1c0>
    	{
          s_time.Seconds = val;
 80015c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
          HAL_RTC_SetTime(hrtc, &s_time, RTC_FORMAT_BIN);
 80015ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 ffc7 	bl	8003566 <HAL_RTC_SetTime>
          state = AM_PM;
 80015d8:	2303      	movs	r3, #3
 80015da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015de:	e014      	b.n	800160a <configureRTCTime+0x1ea>
    	}
    	else
    	{
          test_str = "Invalid Option\n";
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <configureRTCTime+0x2dc>)
 80015e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    	  len = strlen(test_str);
 80015e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80015e6:	f7fe fe1d 	bl	8000224 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	65bb      	str	r3, [r7, #88]	; 0x58
          HAL_UART_Transmit(&huart2, test_str, len, 1000);
 80015ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80015f8:	483e      	ldr	r0, [pc, #248]	; (80016f4 <configureRTCTime+0x2d4>)
 80015fa:	f002 faae 	bl	8003b5a <HAL_UART_Transmit>
          recv_input = 0;// returns
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          setCommandTaskState(MAIN_MENU);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fb55 	bl	8000cb4 <setCommandTaskState>
    	}
        break;
 800160a:	e067      	b.n	80016dc <configureRTCTime+0x2bc>
      case AM_PM:
        test_str = "Enter AM or PM\n";
 800160c:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <configureRTCTime+0x2e8>)
 800160e:	65fb      	str	r3, [r7, #92]	; 0x5c
    	len = strlen(test_str);
 8001610:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001612:	f7fe fe07 	bl	8000224 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	65bb      	str	r3, [r7, #88]	; 0x58
    	HAL_UART_Transmit(&huart2, test_str, len, 1000);
 800161a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800161c:	b29a      	uxth	r2, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001624:	4833      	ldr	r0, [pc, #204]	; (80016f4 <configureRTCTime+0x2d4>)
 8001626:	f002 fa98 	bl	8003b5a <HAL_UART_Transmit>

        recvMsgFromQueue(rtcQueueHandle, rtc_buf);
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <configureRTCTime+0x2d8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fcad 	bl	8000f90 <recvMsgFromQueue>

    	if((strcmp("AM", rtc_buf) == 0) || (strcmp("PM", rtc_buf) == 0))
 8001636:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <configureRTCTime+0x2ec>)
 800163a:	f7fe fde9 	bl	8000210 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <configureRTCTime+0x232>
 8001644:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001646:	4832      	ldr	r0, [pc, #200]	; (8001710 <configureRTCTime+0x2f0>)
 8001648:	f7fe fde2 	bl	8000210 <strcmp>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d12e      	bne.n	80016b0 <configureRTCTime+0x290>
    	{
    	  s_time.TimeFormat = (strcmp("AM", rtc_buf) == 0) ? 0 : 1;
 8001652:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001654:	482d      	ldr	r0, [pc, #180]	; (800170c <configureRTCTime+0x2ec>)
 8001656:	f7fe fddb 	bl	8000210 <strcmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	  HAL_RTC_SetTime(hrtc, &s_time, RTC_FORMAT_BIN);
 800166a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f001 ff77 	bl	8003566 <HAL_RTC_SetTime>
          HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f002 f839 	bl	80036f8 <HAL_RTC_GetTime>
          rtc_str = rtcFormatTimeAndDate(hrtc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fd1a 	bl	80010c0 <rtcFormatTimeAndDate>
 800168c:	4603      	mov	r3, r0
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
    	  xQueueSendToBack(printQueueHandle, &rtc_str, portMAX_DELAY);
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <configureRTCTime+0x2f4>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001698:	2300      	movs	r3, #0
 800169a:	f04f 32ff 	mov.w	r2, #4294967295
 800169e:	f003 fe91 	bl	80053c4 <xQueueGenericSend>

    	  recv_input = 0;// returns
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	  setCommandTaskState(MAIN_MENU);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fb03 	bl	8000cb4 <setCommandTaskState>
 80016ae:	e014      	b.n	80016da <configureRTCTime+0x2ba>
    	}
    	else
    	{
          test_str = "Invalid Option\n";
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <configureRTCTime+0x2dc>)
 80016b2:	65fb      	str	r3, [r7, #92]	; 0x5c
      	  len = strlen(test_str);
 80016b4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016b6:	f7fe fdb5 	bl	8000224 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	65bb      	str	r3, [r7, #88]	; 0x58
          HAL_UART_Transmit(&huart2, test_str, len, 1000);
 80016be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <configureRTCTime+0x2d4>)
 80016ca:	f002 fa46 	bl	8003b5a <HAL_UART_Transmit>
          recv_input = 0;// returns
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
          setCommandTaskState(MAIN_MENU);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff faed 	bl	8000cb4 <setCommandTaskState>
    	}
        break;
 80016da:	bf00      	nop
  while(recv_input)
 80016dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f aeb7 	bne.w	8001454 <configureRTCTime+0x34>
    }
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3768      	adds	r7, #104	; 0x68
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	08008528 	.word	0x08008528
 80016f4:	200049c0 	.word	0x200049c0
 80016f8:	200049bc 	.word	0x200049bc
 80016fc:	0800853c 	.word	0x0800853c
 8001700:	0800854c 	.word	0x0800854c
 8001704:	08008564 	.word	0x08008564
 8001708:	0800857c 	.word	0x0800857c
 800170c:	0800858c 	.word	0x0800858c
 8001710:	08008590 	.word	0x08008590
 8001714:	200049b8 	.word	0x200049b8

08001718 <configureRTCDate>:

void configureRTCDate(RTC_HandleTypeDef *hrtc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b098      	sub	sp, #96	; 0x60
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint8_t recv_val, recv_input = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  char rtc_recv_buf[40];
  RTC_DateTypeDef rtcSetDate, rtcCurrentDate;
  RTCDateState date_state = DATE;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  const char * const rtcDateMsg = "Enter Date (1-31): \n";
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <configureRTCDate+0x218>)
 800172e:	623b      	str	r3, [r7, #32]
  const char * const rtcMonthMsg = "Enter Month (1-12): \n";
 8001730:	4b80      	ldr	r3, [pc, #512]	; (8001934 <configureRTCDate+0x21c>)
 8001732:	61fb      	str	r3, [r7, #28]
  const char * const rtcYearMsg = "Enter Year: \n";
 8001734:	4b80      	ldr	r3, [pc, #512]	; (8001938 <configureRTCDate+0x220>)
 8001736:	61bb      	str	r3, [r7, #24]
  const char * const rtcInvalidMsg = "Invalid Option, Follow Directions You Bozo \n";
 8001738:	4b80      	ldr	r3, [pc, #512]	; (800193c <configureRTCDate+0x224>)
 800173a:	617b      	str	r3, [r7, #20]
  const char * const rtcCompleteMsg = "Configuration Successful\n";
 800173c:	4b80      	ldr	r3, [pc, #512]	; (8001940 <configureRTCDate+0x228>)
 800173e:	613b      	str	r3, [r7, #16]

  char *date_str = malloc(40);
 8001740:	2028      	movs	r0, #40	; 0x28
 8001742:	f006 fba3 	bl	8007e8c <malloc>
 8001746:	4603      	mov	r3, r0
 8001748:	65bb      	str	r3, [r7, #88]	; 0x58
  char *date_time_str = malloc(40);
 800174a:	2028      	movs	r0, #40	; 0x28
 800174c:	f006 fb9e 	bl	8007e8c <malloc>
 8001750:	4603      	mov	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

  while(recv_input)
 8001754:	e0e2      	b.n	800191c <configureRTCDate+0x204>
  {
    switch(date_state)
 8001756:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800175a:	2b02      	cmp	r3, #2
 800175c:	f000 8088 	beq.w	8001870 <configureRTCDate+0x158>
 8001760:	2b02      	cmp	r3, #2
 8001762:	f300 80db 	bgt.w	800191c <configureRTCDate+0x204>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <configureRTCDate+0x58>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d040      	beq.n	80017f0 <configureRTCDate+0xd8>
 800176e:	e0d5      	b.n	800191c <configureRTCDate+0x204>
    {
      case DATE:
        xQueueSendToBack(printQueueHandle, &rtcDateMsg, portMAX_DELAY);
 8001770:	4b74      	ldr	r3, [pc, #464]	; (8001944 <configureRTCDate+0x22c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	f107 0120 	add.w	r1, r7, #32
 8001778:	2300      	movs	r3, #0
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	f003 fe21 	bl	80053c4 <xQueueGenericSend>
        //Block this rtcTask until we have recv'd input from user.
        recvMsgFromQueue(rtcQueueHandle, rtc_recv_buf);
 8001782:	4b71      	ldr	r3, [pc, #452]	; (8001948 <configureRTCDate+0x230>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fbff 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_recv_buf);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fb30 	bl	8007dfc <atoi>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (recv_val >= 1 && recv_val <= 31)
 80017a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d012      	beq.n	80017d0 <configureRTCDate+0xb8>
 80017aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017ae:	2b1f      	cmp	r3, #31
 80017b0:	d80e      	bhi.n	80017d0 <configureRTCDate+0xb8>
        {
         //store onto date struct.
          rtcSetDate.Date = recv_val;
 80017b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          HAL_RTC_SetDate(hrtc, &rtcSetDate, RTC_FORMAT_BIN);
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f001 fff6 	bl	80037b4 <HAL_RTC_SetDate>
          date_state = MONTH;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80017ce:	e00e      	b.n	80017ee <configureRTCDate+0xd6>
        }
        else
        {
          xQueueSendToBack(printQueueHandle, &rtcInvalidMsg, portMAX_DELAY);
 80017d0:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <configureRTCDate+0x22c>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f107 0114 	add.w	r1, r7, #20
 80017d8:	2300      	movs	r3, #0
 80017da:	f04f 32ff 	mov.w	r2, #4294967295
 80017de:	f003 fdf1 	bl	80053c4 <xQueueGenericSend>
          // Stop recv input and return to MAIN_MENU state
          recv_input = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          setCommandTaskState(MAIN_MENU);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fa63 	bl	8000cb4 <setCommandTaskState>
        }
        break;
 80017ee:	e095      	b.n	800191c <configureRTCDate+0x204>
      case MONTH:
        xQueueSendToBack(printQueueHandle, &rtcMonthMsg, portMAX_DELAY);
 80017f0:	4b54      	ldr	r3, [pc, #336]	; (8001944 <configureRTCDate+0x22c>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	f107 011c 	add.w	r1, r7, #28
 80017f8:	2300      	movs	r3, #0
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	f003 fde1 	bl	80053c4 <xQueueGenericSend>
        recvMsgFromQueue(rtcQueueHandle, rtc_recv_buf);
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <configureRTCDate+0x230>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fbbf 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_recv_buf);
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	4618      	mov	r0, r3
 8001818:	f006 faf0 	bl	8007dfc <atoi>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (recv_val >= 1 && recv_val <= 12)
 8001822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <configureRTCDate+0x138>
 800182a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d80e      	bhi.n	8001850 <configureRTCDate+0x138>
        {
         //store onto date struct.
          rtcSetDate.Month = recv_val;
 8001832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001836:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          HAL_RTC_SetDate(hrtc, &rtcSetDate, RTC_FORMAT_BIN);
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 ffb6 	bl	80037b4 <HAL_RTC_SetDate>
          date_state = YEAR;
 8001848:	2302      	movs	r3, #2
 800184a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800184e:	e00e      	b.n	800186e <configureRTCDate+0x156>
        }
        else
        {
          xQueueSendToBack(printQueueHandle, &rtcInvalidMsg, portMAX_DELAY);
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <configureRTCDate+0x22c>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f107 0114 	add.w	r1, r7, #20
 8001858:	2300      	movs	r3, #0
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	f003 fdb1 	bl	80053c4 <xQueueGenericSend>
          // Stop recv input and return to MAIN_MENU state
          recv_input = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          setCommandTaskState(MAIN_MENU);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fa23 	bl	8000cb4 <setCommandTaskState>
        }
        break;
 800186e:	e055      	b.n	800191c <configureRTCDate+0x204>
      case YEAR:
        xQueueSendToBack(printQueueHandle, &rtcYearMsg, portMAX_DELAY);
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <configureRTCDate+0x22c>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	f107 0118 	add.w	r1, r7, #24
 8001878:	2300      	movs	r3, #0
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	f003 fda1 	bl	80053c4 <xQueueGenericSend>
        recvMsgFromQueue(rtcQueueHandle, rtc_recv_buf);
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <configureRTCDate+0x230>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb7f 	bl	8000f90 <recvMsgFromQueue>
        recv_val = atoi(rtc_recv_buf);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4618      	mov	r0, r3
 8001898:	f006 fab0 	bl	8007dfc <atoi>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (recv_val >= 0 && recv_val <= 99)
 80018a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018a6:	2b63      	cmp	r3, #99	; 0x63
 80018a8:	d828      	bhi.n	80018fc <configureRTCDate+0x1e4>
        {
          //store onto date struct.
          rtcSetDate.Year = recv_val;
 80018aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          HAL_RTC_SetDate(hrtc, &rtcSetDate, RTC_FORMAT_BIN);
 80018b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f001 ff7a 	bl	80037b4 <HAL_RTC_SetDate>
          //print full date
          //HAL_RTC_GetDate(&hrtc, &rtcCurrentDate, RTC_FORMAT_BIN);
          xQueueSendToBack(printQueueHandle, &rtcCompleteMsg, portMAX_DELAY);
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <configureRTCDate+0x22c>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f107 0110 	add.w	r1, r7, #16
 80018c8:	2300      	movs	r3, #0
 80018ca:	f04f 32ff 	mov.w	r2, #4294967295
 80018ce:	f003 fd79 	bl	80053c4 <xQueueGenericSend>
          date_time_str = rtcFormatTimeAndDate(hrtc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fbf4 	bl	80010c0 <rtcFormatTimeAndDate>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]
          xQueueSendToBack(printQueueHandle, &date_time_str, portMAX_DELAY);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <configureRTCDate+0x22c>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	2300      	movs	r3, #0
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	f003 fd6b 	bl	80053c4 <xQueueGenericSend>
          recv_input = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          setCommandTaskState(MAIN_MENU);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff f9dd 	bl	8000cb4 <setCommandTaskState>
 80018fa:	e00e      	b.n	800191a <configureRTCDate+0x202>
        }
        else
        {
          xQueueSendToBack(printQueueHandle, &rtcInvalidMsg, portMAX_DELAY);
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <configureRTCDate+0x22c>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 0114 	add.w	r1, r7, #20
 8001904:	2300      	movs	r3, #0
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	f003 fd5b 	bl	80053c4 <xQueueGenericSend>
          // Stop recv input and return to MAIN_MENU state
          recv_input = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          setCommandTaskState(MAIN_MENU);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff f9cd 	bl	8000cb4 <setCommandTaskState>
        }
        break;
 800191a:	bf00      	nop
  while(recv_input)
 800191c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f af18 	bne.w	8001756 <configureRTCDate+0x3e>
        //error handling
    }
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3760      	adds	r7, #96	; 0x60
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	08008594 	.word	0x08008594
 8001934:	080085ac 	.word	0x080085ac
 8001938:	080085c4 	.word	0x080085c4
 800193c:	080085d4 	.word	0x080085d4
 8001940:	08008604 	.word	0x08008604
 8001944:	200049b8 	.word	0x200049b8
 8001948:	200049bc 	.word	0x200049bc

0800194c <rtcReportingCb>:

void rtcReportingCb(void *args)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  RTC_HandleTypeDef *hrtc = args;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60fb      	str	r3, [r7, #12]
  char *rtc_str;
  rtc_str = rtcFormatTimeAndDate(hrtc);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fbb1 	bl	80010c0 <rtcFormatTimeAndDate>
 800195e:	4603      	mov	r3, r0
 8001960:	60bb      	str	r3, [r7, #8]
  xQueueSendToBack(printQueueHandle, &rtc_str, portMAX_DELAY);
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <rtcReportingCb+0x30>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	f107 0108 	add.w	r1, r7, #8
 800196a:	2300      	movs	r3, #0
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	f003 fd28 	bl	80053c4 <xQueueGenericSend>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200049b8 	.word	0x200049b8

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_MspInit+0x54>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_MspInit+0x54>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_MspInit+0x54>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_MspInit+0x54>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	210f      	movs	r1, #15
 80019c2:	f06f 0001 	mvn.w	r0, #1
 80019c6:	f000 fa6e 	bl	8001ea6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	; 0x68
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	225c      	movs	r2, #92	; 0x5c
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f006 fa65 	bl	8007eb8 <memset>
  if(hrtc->Instance==RTC)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_RTC_MspInit+0x4c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019f8:	2320      	movs	r3, #32
 80019fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fdf8 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a12:	f7ff fb4f 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RTC_MspInit+0x50>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3768      	adds	r7, #104	; 0x68
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40002800 	.word	0x40002800
 8001a28:	42470e3c 	.word	0x42470e3c

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x94>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d133      	bne.n	8001ab6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_UART_MspInit+0x98>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a86:	230c      	movs	r3, #12
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a96:	2307      	movs	r3, #7
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <HAL_UART_MspInit+0x9c>)
 8001aa2:	f000 fac9 	bl	8002038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	2026      	movs	r0, #38	; 0x26
 8001aac:	f000 f9fb 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ab0:	2026      	movs	r0, #38	; 0x26
 8001ab2:	f000 fa14 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40004400 	.word	0x40004400
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f8d8 	bl	8001cb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b00:	f004 fea2 	bl	8006848 <xTaskGetSchedulerState>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b0a:	f005 fefd 	bl	8007908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <USART2_IRQHandler+0x10>)
 8001b1a:	f002 f8e1 	bl	8003ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200049c0 	.word	0x200049c0

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f006 f954 	bl	8007e04 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20020000 	.word	0x20020000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	2000009c 	.word	0x2000009c
 8001b90:	20004b00 	.word	0x20004b00

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd4:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd7 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f006 f913 	bl	8007e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7fe fe0f 	bl	800080c <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001bfc:	08008924 	.word	0x08008924
  ldr r2, =_sbss
 8001c00:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c04:	20004afc 	.word	0x20004afc

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f92b 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fe9e 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f943 	bl	8001efa <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f90b 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	20004aa8 	.word	0x20004aa8

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20004aa8 	.word	0x20004aa8

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff29 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff3e 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff31 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff feda 	bl	8001cd8 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d008      	beq.n	8001f44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e052      	b.n	8001fea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0216 	bic.w	r2, r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_DMA_Abort+0x62>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e013      	b.n	8001fbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff fe9f 	bl	8001cd8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d90c      	bls.n	8001fbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e015      	b.n	8001fea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e4      	bne.n	8001f96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	223f      	movs	r2, #63	; 0x3f
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e00c      	b.n	800202a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2205      	movs	r2, #5
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_GPIO_Init+0x324>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x324>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	041a      	lsls	r2, r3, #16
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	400b      	ands	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7ff fc0e 	bl	8001cd8 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7ff fc0a 	bl	8001cd8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254e:	f000 fb7f 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb6e 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	080087d4 	.word	0x080087d4
 800258c:	20000008 	.word	0x20000008
 8002590:	2000000c 	.word	0x2000000c

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	080087e4 	.word	0x080087e4

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d8:	f7ff ffdc 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	080087e4 	.word	0x080087e4

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002634:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800263a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	496c      	ldr	r1, [pc, #432]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002652:	2301      	movs	r3, #1
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	4960      	ldr	r1, [pc, #384]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002680:	2301      	movs	r3, #1
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d017      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002690:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4955      	ldr	r1, [pc, #340]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ae:	d101      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026bc:	2301      	movs	r3, #1
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d017      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	4946      	ldr	r1, [pc, #280]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d101      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80026ec:	2301      	movs	r3, #1
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 808a 	beq.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002726:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002732:	f7ff fad1 	bl	8001cd8 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7ff facd 	bl	8001cd8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e278      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002760:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02f      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	429a      	cmp	r2, r3
 8002774:	d028      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d114      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fa9b 	bl	8001cd8 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7ff fa97 	bl	8001cd8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e240      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ee      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d4:	d114      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ea:	4902      	ldr	r1, [pc, #8]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
 80027f0:	e00c      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42470e40 	.word	0x42470e40
 8002800:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002806:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800280a:	6093      	str	r3, [r2, #8]
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800280e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	4944      	ldr	r1, [pc, #272]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800281a:	4313      	orrs	r3, r2
 800281c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002830:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002832:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	4937      	ldr	r1, [pc, #220]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002870:	492e      	ldr	r1, [pc, #184]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d011      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	4926      	ldr	r1, [pc, #152]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a2:	d101      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80028a4:	2301      	movs	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	491a      	ldr	r1, [pc, #104]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d011      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	4911      	ldr	r1, [pc, #68]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80028f6:	2301      	movs	r3, #1
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	f040 80ff 	bne.w	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002912:	f7ff f9e1 	bl	8001cd8 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002918:	e00e      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800291a:	f7ff f9dd 	bl	8001cd8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d907      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e188      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800292c:	40023800 	.word	0x40023800
 8002930:	424711e0 	.word	0x424711e0
 8002934:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002938:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ea      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002960:	2b00      	cmp	r3, #0
 8002962:	d028      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d124      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800296c:	4b71      	ldr	r3, [pc, #452]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	3301      	adds	r3, #1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	0e1b      	lsrs	r3, r3, #24
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	431a      	orrs	r2, r3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	071b      	lsls	r3, r3, #28
 80029ae:	4961      	ldr	r1, [pc, #388]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d035      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e0:	d130      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	019b      	lsls	r3, r3, #6
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	071b      	lsls	r3, r3, #28
 8002a24:	4943      	ldr	r1, [pc, #268]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a32:	f023 021f 	bic.w	r2, r3, #31
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	493d      	ldr	r1, [pc, #244]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d029      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a58:	d124      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	071b      	lsls	r3, r3, #28
 8002a9c:	4925      	ldr	r1, [pc, #148]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	4917      	ldr	r1, [pc, #92]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7ff f8f8 	bl	8001cd8 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aec:	f7ff f8f4 	bl	8001cd8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e09f      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	f040 8095 	bne.w	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff f8de 	bl	8001cd8 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b20:	f7ff f8da 	bl	8001cd8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e085      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470068 	.word	0x42470068
 8002b3c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4c:	d0e8      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d127      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	4928      	ldr	r1, [pc, #160]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bac:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	4922      	ldr	r1, [pc, #136]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01d      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bda:	d118      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	0e1b      	lsrs	r3, r3, #24
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	019b      	lsls	r3, r3, #6
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4910      	ldr	r1, [pc, #64]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff f860 	bl	8001cd8 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c1c:	f7ff f85c 	bl	8001cd8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e007      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3a:	d1ef      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3730      	adds	r7, #48	; 0x30
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470070 	.word	0x42470070

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c58:	2600      	movs	r6, #0
 8002c5a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002c60:	2600      	movs	r6, #0
 8002c62:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002c64:	2600      	movs	r6, #0
 8002c66:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c68:	2600      	movs	r6, #0
 8002c6a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6c:	4ea3      	ldr	r6, [pc, #652]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002c6e:	68b6      	ldr	r6, [r6, #8]
 8002c70:	f006 060c 	and.w	r6, r6, #12
 8002c74:	2e0c      	cmp	r6, #12
 8002c76:	f200 8137 	bhi.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x298>
 8002c7a:	f20f 0c08 	addw	ip, pc, #8
 8002c7e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002ee9 	.word	0x08002ee9
 8002c8c:	08002ee9 	.word	0x08002ee9
 8002c90:	08002ee9 	.word	0x08002ee9
 8002c94:	08002cbf 	.word	0x08002cbf
 8002c98:	08002ee9 	.word	0x08002ee9
 8002c9c:	08002ee9 	.word	0x08002ee9
 8002ca0:	08002ee9 	.word	0x08002ee9
 8002ca4:	08002cc5 	.word	0x08002cc5
 8002ca8:	08002ee9 	.word	0x08002ee9
 8002cac:	08002ee9 	.word	0x08002ee9
 8002cb0:	08002ee9 	.word	0x08002ee9
 8002cb4:	08002ddb 	.word	0x08002ddb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002cba:	613b      	str	r3, [r7, #16]
       break;
 8002cbc:	e117      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002cc0:	613b      	str	r3, [r7, #16]
      break;
 8002cc2:	e114      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d024      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cea:	f04f 0500 	mov.w	r5, #0
 8002cee:	ea02 0004 	and.w	r0, r2, r4
 8002cf2:	ea03 0105 	and.w	r1, r3, r5
 8002cf6:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002cf8:	fb03 f201 	mul.w	r2, r3, r1
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	fb03 f300 	mul.w	r3, r3, r0
 8002d02:	4413      	add	r3, r2
 8002d04:	4a7f      	ldr	r2, [pc, #508]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002d06:	fba0 0102 	umull	r0, r1, r0, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f7fd fa8d 	bl	8000234 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4613      	mov	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e04c      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	ea02 0800 	and.w	r8, r2, r0
 8002d3c:	ea03 0901 	and.w	r9, r3, r1
 8002d40:	4640      	mov	r0, r8
 8002d42:	4649      	mov	r1, r9
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	014b      	lsls	r3, r1, #5
 8002d4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d52:	0142      	lsls	r2, r0, #5
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	ebb0 0008 	subs.w	r0, r0, r8
 8002d5c:	eb61 0109 	sbc.w	r1, r1, r9
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	018b      	lsls	r3, r1, #6
 8002d6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d6e:	0182      	lsls	r2, r0, #6
 8002d70:	1a12      	subs	r2, r2, r0
 8002d72:	eb63 0301 	sbc.w	r3, r3, r1
 8002d76:	f04f 0000 	mov.w	r0, #0
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	00d9      	lsls	r1, r3, #3
 8002d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d84:	00d0      	lsls	r0, r2, #3
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	eb12 0208 	adds.w	r2, r2, r8
 8002d8e:	eb43 0309 	adc.w	r3, r3, r9
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0299      	lsls	r1, r3, #10
 8002d9c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002da0:	0290      	lsls	r0, r2, #10
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f7fd fa3f 	bl	8000234 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dbe:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	613b      	str	r3, [r7, #16]
      break;
 8002dd8:	e089      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dda:	4948      	ldr	r1, [pc, #288]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ddc:	6849      	ldr	r1, [r1, #4]
 8002dde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002de2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de4:	4945      	ldr	r1, [pc, #276]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002de6:	6849      	ldr	r1, [r1, #4]
 8002de8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d024      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df0:	4942      	ldr	r1, [pc, #264]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002df2:	6849      	ldr	r1, [r1, #4]
 8002df4:	0989      	lsrs	r1, r1, #6
 8002df6:	4608      	mov	r0, r1
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002e00:	f04f 0500 	mov.w	r5, #0
 8002e04:	ea00 0204 	and.w	r2, r0, r4
 8002e08:	ea01 0305 	and.w	r3, r1, r5
 8002e0c:	493d      	ldr	r1, [pc, #244]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002e0e:	fb01 f003 	mul.w	r0, r1, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	fb01 f102 	mul.w	r1, r1, r2
 8002e18:	1844      	adds	r4, r0, r1
 8002e1a:	493a      	ldr	r1, [pc, #232]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002e1c:	fba2 0101 	umull	r0, r1, r2, r1
 8002e20:	1863      	adds	r3, r4, r1
 8002e22:	4619      	mov	r1, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	f7fd fa02 	bl	8000234 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e04a      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	461a      	mov	r2, r3
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	ea02 0400 	and.w	r4, r2, r0
 8002e52:	ea03 0501 	and.w	r5, r3, r1
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	014b      	lsls	r3, r1, #5
 8002e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e68:	0142      	lsls	r2, r0, #5
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	1b00      	subs	r0, r0, r4
 8002e70:	eb61 0105 	sbc.w	r1, r1, r5
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	018b      	lsls	r3, r1, #6
 8002e7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e82:	0182      	lsls	r2, r0, #6
 8002e84:	1a12      	subs	r2, r2, r0
 8002e86:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8a:	f04f 0000 	mov.w	r0, #0
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	00d9      	lsls	r1, r3, #3
 8002e94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e98:	00d0      	lsls	r0, r2, #3
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	1912      	adds	r2, r2, r4
 8002ea0:	eb45 0303 	adc.w	r3, r5, r3
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	0299      	lsls	r1, r3, #10
 8002eae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eb2:	0290      	lsls	r0, r2, #10
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f7fd f9b6 	bl	8000234 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0f1b      	lsrs	r3, r3, #28
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	613b      	str	r3, [r7, #16]
      break;
 8002ee6:	e002      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002eea:	613b      	str	r3, [r7, #16]
      break;
 8002eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eee:	693b      	ldr	r3, [r7, #16]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	017d7840 	.word	0x017d7840

08002f08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e28d      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8083 	beq.w	800302e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f28:	4b94      	ldr	r3, [pc, #592]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d019      	beq.n	8002f68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f34:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f40:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b84      	ldr	r3, [pc, #528]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x124>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e25a      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x90>
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7b      	ldr	r2, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xcc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xb4>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a72      	ldr	r2, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xcc>
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6b      	ldr	r2, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fe7c 	bl	8001cd8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fe78 	bl	8001cd8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e21f      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xdc>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fe68 	bl	8001cd8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fe64 	bl	8001cd8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e20b      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x104>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06f      	beq.n	800311a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800303a:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d017      	beq.n	8003076 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003046:	4b4d      	ldr	r3, [pc, #308]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d11c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x186>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1d3      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	e03a      	b.n	800311a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x278>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fe11 	bl	8001cd8 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe fe0d 	bl	8001cd8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1b4      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4925      	ldr	r1, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x278>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fdf0 	bl	8001cd8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fdec 	bl	8001cd8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e193      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe fdd0 	bl	8001cd8 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fdcc 	bl	8001cd8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e173      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x234>
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe fdb9 	bl	8001cd8 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00e      	b.n	8003188 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe fdb5 	bl	8001cd8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d907      	bls.n	8003188 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e15c      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b8a      	ldr	r3, [pc, #552]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ea      	bne.n	800316a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b83      	ldr	r3, [pc, #524]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fd75 	bl	8001cd8 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe fd71 	bl	8001cd8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e118      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x31e>
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x358>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x340>
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x358>
 8003248:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a59      	ldr	r2, [pc, #356]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a56      	ldr	r2, [pc, #344]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe fd36 	bl	8001cd8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fd32 	bl	8001cd8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0d7      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCC_OscConfig+0x368>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fd20 	bl	8001cd8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe fd1c 	bl	8001cd8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0c1      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80ad 	beq.w	8003434 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d145      	bne.n	800337a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fcf0 	bl	8001cd8 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fcec 	bl	8001cd8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e093      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	071b      	lsls	r3, r3, #28
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe fcc1 	bl	8001cd8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fcbd 	bl	8001cd8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e064      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x452>
 8003378:	e05c      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fcaa 	bl	8001cd8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fca6 	bl	8001cd8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e04d      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x480>
 80033a6:	e045      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e040      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_RCC_OscConfig+0x538>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d030      	beq.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d129      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d122      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d119      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d10f      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e083      	b.n	800355e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7f5b      	ldrb	r3, [r3, #29]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fab6 	bl	80019d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	22ca      	movs	r2, #202	; 0xca
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2253      	movs	r2, #83	; 0x53
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fab4 	bl	80039f0 <RTC_EnterInitMode>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e05e      	b.n	800355e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68d2      	ldr	r2, [r2, #12]
 80034da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	041a      	lsls	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10e      	bne.n	800352c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa46 	bl	80039a0 <HAL_RTC_WaitForSynchro>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2204      	movs	r2, #4
 8003526:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e018      	b.n	800355e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	7f1b      	ldrb	r3, [r3, #28]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_RTC_SetTime+0x1c>
 800357e:	2302      	movs	r3, #2
 8003580:	e0b6      	b.n	80036f0 <HAL_RTC_SetTime+0x18a>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2202      	movs	r2, #2
 800358c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d12a      	bne.n	80035ea <HAL_RTC_SetTime+0x84>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    //tmpreg &= ~0x30000;
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fa4b 	bl	8003a48 <RTC_ByteToBcd2>
 80035b2:	4603      	mov	r3, r0
 80035b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa44 	bl	8003a48 <RTC_ByteToBcd2>
 80035c0:	4603      	mov	r3, r0
 80035c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa3c 	bl	8003a48 <RTC_ByteToBcd2>
 80035d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80035d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	78db      	ldrb	r3, [r3, #3]
 80035da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

    tmpreg |= 0x00001;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e018      	b.n	800361c <HAL_RTC_SetTime+0xb6>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_RTC_SetTime+0x98>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800360a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003610:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	22ca      	movs	r2, #202	; 0xca
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2253      	movs	r2, #83	; 0x53
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f9df 	bl	80039f0 <RTC_EnterInitMode>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RTC_SetTime+0xea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2204      	movs	r2, #4
 8003644:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04f      	b.n	80036f0 <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800365a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800365e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800366e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
    hrtc->Instance->TR &= ~0x10000;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003696:	601a      	str	r2, [r3, #0]
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d111      	bne.n	80036da <HAL_RTC_SetTime+0x174>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f972 	bl	80039a0 <HAL_RTC_WaitForSynchro>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RTC_SetTime+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	22ff      	movs	r2, #255	; 0xff
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2204      	movs	r2, #4
 80036ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00a      	b.n	80036f0 <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80036ee:	2300      	movs	r3, #0
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}

080036f8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800372a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800372e:	617b      	str	r3, [r7, #20]
  //tmpreg = (uint32_t)(hrtc->Instance->TR);
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	701a      	strb	r2, [r3, #0]
  /* Fill the structure fields with the read parameters */
  //sTime->Hours = (uint8_t)(tmpreg >> 16U);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11a      	bne.n	80037aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f983 	bl	8003a84 <RTC_Bcd2ToByte>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f97a 	bl	8003a84 <RTC_Bcd2ToByte>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f971 	bl	8003a84 <RTC_Bcd2ToByte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	7f1b      	ldrb	r3, [r3, #28]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_RTC_SetDate+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e094      	b.n	80038fa <HAL_RTC_SetDate+0x146>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2202      	movs	r2, #2
 80037da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_RTC_SetDate+0x4c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	330a      	adds	r3, #10
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11c      	bne.n	8003840 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	78db      	ldrb	r3, [r3, #3]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f91c 	bl	8003a48 <RTC_ByteToBcd2>
 8003810:	4603      	mov	r3, r0
 8003812:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f915 	bl	8003a48 <RTC_ByteToBcd2>
 800381e:	4603      	mov	r3, r0
 8003820:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003822:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	789b      	ldrb	r3, [r3, #2]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f90d 	bl	8003a48 <RTC_ByteToBcd2>
 800382e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003830:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e00e      	b.n	800385e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800384c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003852:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	22ca      	movs	r2, #202	; 0xca
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2253      	movs	r2, #83	; 0x53
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f8be 	bl	80039f0 <RTC_EnterInitMode>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2204      	movs	r2, #4
 8003886:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e033      	b.n	80038fa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800389c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d111      	bne.n	80038e4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f86d 	bl	80039a0 <HAL_RTC_WaitForSynchro>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ff      	movs	r2, #255	; 0xff
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2204      	movs	r2, #4
 80038d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e00a      	b.n	80038fa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}

08003902 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800391c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003920:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	0b5b      	lsrs	r3, r3, #13
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11a      	bne.n	8003996 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	78db      	ldrb	r3, [r3, #3]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f88d 	bl	8003a84 <RTC_Bcd2ToByte>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f884 	bl	8003a84 <RTC_Bcd2ToByte>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f87b 	bl	8003a84 <RTC_Bcd2ToByte>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039bc:	f7fe f98c 	bl	8001cd8 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039c2:	e009      	b.n	80039d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039c4:	f7fe f988 	bl	8001cd8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d2:	d901      	bls.n	80039d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e007      	b.n	80039e8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a12:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fe f960 	bl	8001cd8 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a1a:	e009      	b.n	8003a30 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a1c:	f7fe f95c 	bl	8001cd8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2a:	d901      	bls.n	8003a30 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e007      	b.n	8003a40 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003a56:	e005      	b.n	8003a64 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	3b0a      	subs	r3, #10
 8003a62:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	d8f6      	bhi.n	8003a58 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	b2db      	uxtb	r3, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03f      	b.n	8003b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd ffa0 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fddb 	bl	80046c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08a      	sub	sp, #40	; 0x28
 8003b5e:	af02      	add	r7, sp, #8
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d17c      	bne.n	8003c74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Transmit+0x2c>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e075      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Transmit+0x3e>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e06e      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2221      	movs	r2, #33	; 0x21
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bae:	f7fe f893 	bl	8001cd8 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d108      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e003      	b.n	8003be4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bec:	e02a      	b.n	8003c44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb1f 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3302      	adds	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e007      	b.n	8003c36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cf      	bne.n	8003bee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 faef 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d11d      	bne.n	8003cd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_UART_Receive_IT+0x26>
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e016      	b.n	8003cd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Receive_IT+0x38>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e00f      	b.n	8003cd6 <HAL_UART_Receive_IT+0x58>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fb24 	bl	8004318 <UART_Start_Receive_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0ba      	sub	sp, #232	; 0xe8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_UART_IRQHandler+0x66>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc03 	bl	800454a <UART_Receive_IT>
      return;
 8003d44:	e256      	b.n	80041f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80de 	beq.w	8003f0c <HAL_UART_IRQHandler+0x22c>
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80d1 	beq.w	8003f0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0xae>
 8003d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_UART_IRQHandler+0xd2>
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_UART_IRQHandler+0xf6>
 8003dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0204 	orr.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_UART_IRQHandler+0x126>
 8003de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0208 	orr.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 81ed 	beq.w	80041ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_UART_IRQHandler+0x14e>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fb8e 	bl	800454a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <HAL_UART_IRQHandler+0x17a>
 8003e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04f      	beq.n	8003efa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa96 	bl	800438c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d141      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1d9      	bne.n	8003e6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d013      	beq.n	8003eea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	4a7d      	ldr	r2, [pc, #500]	; (80040bc <HAL_UART_IRQHandler+0x3dc>)
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f88f 	bl	8001ff2 <HAL_DMA_Abort_IT>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e00e      	b.n	8003f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f990 	bl	8004210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00a      	b.n	8003f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f98c 	bl	8004210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e006      	b.n	8003f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f988 	bl	8004210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f06:	e170      	b.n	80041ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	bf00      	nop
    return;
 8003f0a:	e16e      	b.n	80041ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 814a 	bne.w	80041aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8143 	beq.w	80041aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 813c 	beq.w	80041aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	f040 80b4 	bne.w	80040c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8140 	beq.w	80041ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f76:	429a      	cmp	r2, r3
 8003f78:	f080 8139 	bcs.w	80041ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	f000 8088 	beq.w	80040a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1d9      	bne.n	8003f92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004002:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004006:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800400a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e1      	bne.n	8003fde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800402a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800403e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004040:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004044:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800404c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e3      	bne.n	800401a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	f023 0310 	bic.w	r3, r3, #16
 8004076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004084:	65ba      	str	r2, [r7, #88]	; 0x58
 8004086:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd ff38 	bl	8001f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f8b6 	bl	8004224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040b8:	e099      	b.n	80041ee <HAL_UART_IRQHandler+0x50e>
 80040ba:	bf00      	nop
 80040bc:	08004453 	.word	0x08004453
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 808b 	beq.w	80041f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8086 	beq.w	80041f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800410a:	647a      	str	r2, [r7, #68]	; 0x44
 800410c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e3      	bne.n	80040e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	623b      	str	r3, [r7, #32]
   return(result);
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004142:	633a      	str	r2, [r7, #48]	; 0x30
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e3      	bne.n	800411e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	60fb      	str	r3, [r7, #12]
   return(result);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0310 	bic.w	r3, r3, #16
 800417a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800419c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f83e 	bl	8004224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a8:	e023      	b.n	80041f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_UART_IRQHandler+0x4ea>
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f959 	bl	800447a <UART_Transmit_IT>
    return;
 80041c8:	e014      	b.n	80041f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <HAL_UART_IRQHandler+0x514>
 80041d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f999 	bl	800451a <UART_EndTransmit_IT>
    return;
 80041e8:	e004      	b.n	80041f4 <HAL_UART_IRQHandler+0x514>
    return;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <HAL_UART_IRQHandler+0x514>
      return;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <HAL_UART_IRQHandler+0x514>
      return;
 80041f2:	bf00      	nop
  }
}
 80041f4:	37e8      	adds	r7, #232	; 0xe8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop

080041fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b090      	sub	sp, #64	; 0x40
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e050      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d04c      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <UART_WaitOnFlagUntilTimeout+0x30>
 800425c:	f7fd fd3c 	bl	8001cd8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004268:	429a      	cmp	r2, r3
 800426a:	d241      	bcs.n	80042f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800428c:	637a      	str	r2, [r7, #52]	; 0x34
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	613b      	str	r3, [r7, #16]
   return(result);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c0:	623a      	str	r2, [r7, #32]
 80042c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	69f9      	ldr	r1, [r7, #28]
 80042c6:	6a3a      	ldr	r2, [r7, #32]
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e00f      	b.n	8004310 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	d09f      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3740      	adds	r7, #64	; 0x40
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2222      	movs	r2, #34	; 0x22
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0220 	orr.w	r2, r2, #32
 800437c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b095      	sub	sp, #84	; 0x54
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b4:	643a      	str	r2, [r7, #64]	; 0x40
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b01      	cmp	r3, #1
 8004402:	d119      	bne.n	8004438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60bb      	str	r3, [r7, #8]
   return(result);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0310 	bic.w	r3, r3, #16
 800441a:	647b      	str	r3, [r7, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004424:	61ba      	str	r2, [r7, #24]
 8004426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004446:	bf00      	nop
 8004448:	3754      	adds	r7, #84	; 0x54
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fecf 	bl	8004210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b21      	cmp	r3, #33	; 0x21
 800448c:	d13e      	bne.n	800450c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d114      	bne.n	80044c2 <UART_Transmit_IT+0x48>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d110      	bne.n	80044c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	621a      	str	r2, [r3, #32]
 80044c0:	e008      	b.n	80044d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6211      	str	r1, [r2, #32]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4619      	mov	r1, r3
 80044e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004506:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fe5e 	bl	80041fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08c      	sub	sp, #48	; 0x30
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b22      	cmp	r3, #34	; 0x22
 800455c:	f040 80ab 	bne.w	80046b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d117      	bne.n	800459a <UART_Receive_IT+0x50>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	b29a      	uxth	r2, r3
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
 8004598:	e026      	b.n	80045e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ac:	d007      	beq.n	80045be <UART_Receive_IT+0x74>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <UART_Receive_IT+0x82>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e008      	b.n	80045de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d15a      	bne.n	80046b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0220 	bic.w	r2, r2, #32
 800460a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	2b01      	cmp	r3, #1
 800463a:	d135      	bne.n	80046a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	613b      	str	r3, [r7, #16]
   return(result);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	623a      	str	r2, [r7, #32]
 8004664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	69f9      	ldr	r1, [r7, #28]
 8004668:	6a3a      	ldr	r2, [r7, #32]
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b10      	cmp	r3, #16
 8004682:	d10a      	bne.n	800469a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff fdbf 	bl	8004224 <HAL_UARTEx_RxEventCallback>
 80046a6:	e002      	b.n	80046ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc f875 	bl	8000798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e002      	b.n	80046b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	b09f      	sub	sp, #124	; 0x7c
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	68d9      	ldr	r1, [r3, #12]
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	ea40 0301 	orr.w	r3, r0, r1
 80046e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004704:	f021 010c 	bic.w	r1, r1, #12
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800470e:	430b      	orrs	r3, r1
 8004710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	6999      	ldr	r1, [r3, #24]
 8004720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	ea40 0301 	orr.w	r3, r0, r1
 8004728:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4bc5      	ldr	r3, [pc, #788]	; (8004a44 <UART_SetConfig+0x384>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d004      	beq.n	800473e <UART_SetConfig+0x7e>
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4bc3      	ldr	r3, [pc, #780]	; (8004a48 <UART_SetConfig+0x388>)
 800473a:	429a      	cmp	r2, r3
 800473c:	d103      	bne.n	8004746 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800473e:	f7fd ff49 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8004742:	6778      	str	r0, [r7, #116]	; 0x74
 8004744:	e002      	b.n	800474c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7fd ff31 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 800474a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	f040 80b6 	bne.w	80048c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475a:	461c      	mov	r4, r3
 800475c:	f04f 0500 	mov.w	r5, #0
 8004760:	4622      	mov	r2, r4
 8004762:	462b      	mov	r3, r5
 8004764:	1891      	adds	r1, r2, r2
 8004766:	6439      	str	r1, [r7, #64]	; 0x40
 8004768:	415b      	adcs	r3, r3
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
 800476c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004770:	1912      	adds	r2, r2, r4
 8004772:	eb45 0303 	adc.w	r3, r5, r3
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	00d9      	lsls	r1, r3, #3
 8004780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004784:	00d0      	lsls	r0, r2, #3
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	1911      	adds	r1, r2, r4
 800478c:	6639      	str	r1, [r7, #96]	; 0x60
 800478e:	416b      	adcs	r3, r5
 8004790:	667b      	str	r3, [r7, #100]	; 0x64
 8004792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	461a      	mov	r2, r3
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	1891      	adds	r1, r2, r2
 800479e:	63b9      	str	r1, [r7, #56]	; 0x38
 80047a0:	415b      	adcs	r3, r3
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047ac:	f7fb fd42 	bl	8000234 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4ba5      	ldr	r3, [pc, #660]	; (8004a4c <UART_SetConfig+0x38c>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	011e      	lsls	r6, r3, #4
 80047be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c0:	461c      	mov	r4, r3
 80047c2:	f04f 0500 	mov.w	r5, #0
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	1891      	adds	r1, r2, r2
 80047cc:	6339      	str	r1, [r7, #48]	; 0x30
 80047ce:	415b      	adcs	r3, r3
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047d6:	1912      	adds	r2, r2, r4
 80047d8:	eb45 0303 	adc.w	r3, r5, r3
 80047dc:	f04f 0000 	mov.w	r0, #0
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	00d9      	lsls	r1, r3, #3
 80047e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ea:	00d0      	lsls	r0, r2, #3
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	1911      	adds	r1, r2, r4
 80047f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80047f4:	416b      	adcs	r3, r5
 80047f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	1891      	adds	r1, r2, r2
 8004804:	62b9      	str	r1, [r7, #40]	; 0x28
 8004806:	415b      	adcs	r3, r3
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800480e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004812:	f7fb fd0f 	bl	8000234 <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4b8c      	ldr	r3, [pc, #560]	; (8004a4c <UART_SetConfig+0x38c>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	; 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	3332      	adds	r3, #50	; 0x32
 800482e:	4a87      	ldr	r2, [pc, #540]	; (8004a4c <UART_SetConfig+0x38c>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800483c:	441e      	add	r6, r3
 800483e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004840:	4618      	mov	r0, r3
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	1894      	adds	r4, r2, r2
 800484c:	623c      	str	r4, [r7, #32]
 800484e:	415b      	adcs	r3, r3
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004856:	1812      	adds	r2, r2, r0
 8004858:	eb41 0303 	adc.w	r3, r1, r3
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	f04f 0500 	mov.w	r5, #0
 8004864:	00dd      	lsls	r5, r3, #3
 8004866:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800486a:	00d4      	lsls	r4, r2, #3
 800486c:	4622      	mov	r2, r4
 800486e:	462b      	mov	r3, r5
 8004870:	1814      	adds	r4, r2, r0
 8004872:	653c      	str	r4, [r7, #80]	; 0x50
 8004874:	414b      	adcs	r3, r1
 8004876:	657b      	str	r3, [r7, #84]	; 0x54
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	461a      	mov	r2, r3
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	1891      	adds	r1, r2, r2
 8004884:	61b9      	str	r1, [r7, #24]
 8004886:	415b      	adcs	r3, r3
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004892:	f7fb fccf 	bl	8000234 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4b6c      	ldr	r3, [pc, #432]	; (8004a4c <UART_SetConfig+0x38c>)
 800489c:	fba3 1302 	umull	r1, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2164      	movs	r1, #100	; 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	3332      	adds	r3, #50	; 0x32
 80048ae:	4a67      	ldr	r2, [pc, #412]	; (8004a4c <UART_SetConfig+0x38c>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 0207 	and.w	r2, r3, #7
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4432      	add	r2, r6
 80048c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c2:	e0b9      	b.n	8004a38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c6:	461c      	mov	r4, r3
 80048c8:	f04f 0500 	mov.w	r5, #0
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	6139      	str	r1, [r7, #16]
 80048d4:	415b      	adcs	r3, r3
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048dc:	1912      	adds	r2, r2, r4
 80048de:	eb45 0303 	adc.w	r3, r5, r3
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	00d9      	lsls	r1, r3, #3
 80048ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f0:	00d0      	lsls	r0, r2, #3
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	eb12 0804 	adds.w	r8, r2, r4
 80048fa:	eb43 0905 	adc.w	r9, r3, r5
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4618      	mov	r0, r3
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	008b      	lsls	r3, r1, #2
 8004912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004916:	0082      	lsls	r2, r0, #2
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fb fc8a 	bl	8000234 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <UART_SetConfig+0x38c>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011e      	lsls	r6, r3, #4
 800492e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004930:	4618      	mov	r0, r3
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	1894      	adds	r4, r2, r2
 800493c:	60bc      	str	r4, [r7, #8]
 800493e:	415b      	adcs	r3, r3
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004946:	1812      	adds	r2, r2, r0
 8004948:	eb41 0303 	adc.w	r3, r1, r3
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	f04f 0500 	mov.w	r5, #0
 8004954:	00dd      	lsls	r5, r3, #3
 8004956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800495a:	00d4      	lsls	r4, r2, #3
 800495c:	4622      	mov	r2, r4
 800495e:	462b      	mov	r3, r5
 8004960:	1814      	adds	r4, r2, r0
 8004962:	64bc      	str	r4, [r7, #72]	; 0x48
 8004964:	414b      	adcs	r3, r1
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	008b      	lsls	r3, r1, #2
 800497c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004980:	0082      	lsls	r2, r0, #2
 8004982:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004986:	f7fb fc55 	bl	8000234 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <UART_SetConfig+0x38c>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <UART_SetConfig+0x38c>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ae:	441e      	add	r6, r3
 80049b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b2:	4618      	mov	r0, r3
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	1894      	adds	r4, r2, r2
 80049be:	603c      	str	r4, [r7, #0]
 80049c0:	415b      	adcs	r3, r3
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	1812      	adds	r2, r2, r0
 80049ca:	eb41 0303 	adc.w	r3, r1, r3
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	f04f 0500 	mov.w	r5, #0
 80049d6:	00dd      	lsls	r5, r3, #3
 80049d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049dc:	00d4      	lsls	r4, r2, #3
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	eb12 0a00 	adds.w	sl, r2, r0
 80049e6:	eb43 0b01 	adc.w	fp, r3, r1
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	008b      	lsls	r3, r1, #2
 80049fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a02:	0082      	lsls	r2, r0, #2
 8004a04:	4650      	mov	r0, sl
 8004a06:	4659      	mov	r1, fp
 8004a08:	f7fb fc14 	bl	8000234 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <UART_SetConfig+0x38c>)
 8004a12:	fba3 1302 	umull	r1, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	3332      	adds	r3, #50	; 0x32
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <UART_SetConfig+0x38c>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4432      	add	r2, r6
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	377c      	adds	r7, #124	; 0x7c
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	51eb851f 	.word	0x51eb851f

08004a50 <__NVIC_SetPriority>:
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f06f 0004 	mvn.w	r0, #4
 8004aae:	f7ff ffcf 	bl	8004a50 <__NVIC_SetPriority>
#endif
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004aca:	f06f 0305 	mvn.w	r3, #5
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e00c      	b.n	8004aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <osKernelInitialize+0x44>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <osKernelInitialize+0x44>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	e002      	b.n	8004aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aec:	687b      	ldr	r3, [r7, #4]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	200000a0 	.word	0x200000a0

08004b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b06:	f3ef 8305 	mrs	r3, IPSR
 8004b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b12:	f06f 0305 	mvn.w	r3, #5
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	e010      	b.n	8004b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <osKernelStart+0x48>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d109      	bne.n	8004b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b22:	f7ff ffbf 	bl	8004aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <osKernelStart+0x48>)
 8004b28:	2202      	movs	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b2c:	f001 fa44 	bl	8005fb8 <vTaskStartScheduler>
      stat = osOK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e002      	b.n	8004b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	200000a0 	.word	0x200000a0

08004b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af04      	add	r7, sp, #16
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5c:	f3ef 8305 	mrs	r3, IPSR
 8004b60:	617b      	str	r3, [r7, #20]
  return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d17e      	bne.n	8004c66 <osThreadNew+0x11a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d07b      	beq.n	8004c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b72:	2318      	movs	r3, #24
 8004b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d045      	beq.n	8004c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <osThreadNew+0x48>
        name = attr->name;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <osThreadNew+0x6e>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b38      	cmp	r3, #56	; 0x38
 8004bac:	d805      	bhi.n	8004bba <osThreadNew+0x6e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <osThreadNew+0x72>
        return (NULL);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e054      	b.n	8004c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <osThreadNew+0xa8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b5b      	cmp	r3, #91	; 0x5b
 8004bdc:	d90a      	bls.n	8004bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <osThreadNew+0xa8>
        mem = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e010      	b.n	8004c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10c      	bne.n	8004c16 <osThreadNew+0xca>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <osThreadNew+0xca>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <osThreadNew+0xca>
          mem = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e001      	b.n	8004c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d110      	bne.n	8004c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c24:	9202      	str	r2, [sp, #8]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 ffea 	bl	8005c0c <xTaskCreateStatic>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e013      	b.n	8004c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d110      	bne.n	8004c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f001 f835 	bl	8005cc6 <xTaskCreate>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d001      	beq.n	8004c66 <osThreadNew+0x11a>
            hTask = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c66:	693b      	ldr	r3, [r7, #16]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	; 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c78:	f3ef 8305 	mrs	r3, IPSR
 8004c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <osDelay+0x1c>
    stat = osErrorISR;
 8004c84:	f06f 0305 	mvn.w	r3, #5
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e007      	b.n	8004c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f001 f95a 	bl	8005f50 <vTaskDelay>
    }
  }

  return (stat);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 fc4d 	bl	800754e <pvTimerGetTimerID>
 8004cb4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce4:	f3ef 8305 	mrs	r3, IPSR
 8004ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d163      	bne.n	8004db8 <osTimerNew+0xe8>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d060      	beq.n	8004db8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004cf6:	2008      	movs	r0, #8
 8004cf8:	f002 fe96 	bl	8007a28 <pvPortMalloc>
 8004cfc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d059      	beq.n	8004db8 <osTimerNew+0xe8>
      callb->func = func;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <osTimerNew+0x4c>
        reload = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e001      	b.n	8004d20 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <osTimerNew+0x6e>
          name = attr->name;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d006      	beq.n	8004d54 <osTimerNew+0x84>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8004d4c:	d902      	bls.n	8004d54 <osTimerNew+0x84>
          mem = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e00c      	b.n	8004d6e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <osTimerNew+0x9e>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <osTimerNew+0x9e>
            mem = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e001      	b.n	8004d6e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10c      	bne.n	8004d8e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <osTimerNew+0xf4>)
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	2101      	movs	r1, #1
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f002 f83a 	bl	8006dfe <xTimerCreateStatic>
 8004d8a:	6238      	str	r0, [r7, #32]
 8004d8c:	e00b      	b.n	8004da6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d108      	bne.n	8004da6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <osTimerNew+0xf4>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da0:	f002 f80c 	bl	8006dbc <xTimerCreate>
 8004da4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <osTimerNew+0xe8>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osTimerNew+0xe8>
        vPortFree (callb);
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	f002 ff04 	bl	8007bc0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004db8:	6a3b      	ldr	r3, [r7, #32]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	; 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08004ca7 	.word	0x08004ca7

08004dc8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd6:	f3ef 8305 	mrs	r3, IPSR
 8004dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osTimerStart+0x22>
    stat = osErrorISR;
 8004de2:	f06f 0305 	mvn.w	r3, #5
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e017      	b.n	8004e1a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004df0:	f06f 0303 	mvn.w	r3, #3
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e010      	b.n	8004e1a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	2104      	movs	r1, #4
 8004e02:	6938      	ldr	r0, [r7, #16]
 8004e04:	f002 f874 	bl	8006ef0 <xTimerGenericCommand>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <osTimerStart+0x4c>
      stat = osOK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e002      	b.n	8004e1a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004e14:	f06f 0302 	mvn.w	r3, #2
 8004e18:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004e1a:	697b      	ldr	r3, [r7, #20]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e30:	f3ef 8305 	mrs	r3, IPSR
 8004e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e36:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <osTimerStop+0x20>
    stat = osErrorISR;
 8004e3c:	f06f 0305 	mvn.w	r3, #5
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e021      	b.n	8004e88 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <osTimerStop+0x2e>
    stat = osErrorParameter;
 8004e4a:	f06f 0303 	mvn.w	r3, #3
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e01a      	b.n	8004e88 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	f002 fb52 	bl	80074fc <xTimerIsTimerActive>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <osTimerStop+0x42>
      stat = osErrorResource;
 8004e5e:	f06f 0302 	mvn.w	r3, #2
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e010      	b.n	8004e88 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8004e66:	2300      	movs	r3, #0
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2103      	movs	r1, #3
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f002 f83d 	bl	8006ef0 <xTimerGenericCommand>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <osTimerStop+0x5e>
        stat = osOK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e002      	b.n	8004e88 <osTimerStop+0x64>
      } else {
        stat = osError;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
 8004e86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e88:	697b      	ldr	r3, [r7, #20]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b08a      	sub	sp, #40	; 0x28
 8004e96:	af02      	add	r7, sp, #8
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea2:	f3ef 8305 	mrs	r3, IPSR
 8004ea6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ea8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d15f      	bne.n	8004f6e <osMessageQueueNew+0xdc>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05c      	beq.n	8004f6e <osMessageQueueNew+0xdc>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d059      	beq.n	8004f6e <osMessageQueueNew+0xdc>
    mem = -1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d029      	beq.n	8004f1a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d012      	beq.n	8004ef4 <osMessageQueueNew+0x62>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b4f      	cmp	r3, #79	; 0x4f
 8004ed4:	d90e      	bls.n	8004ef4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <osMessageQueueNew+0x62>
        mem = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e014      	b.n	8004f1e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d110      	bne.n	8004f1e <osMessageQueueNew+0x8c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <osMessageQueueNew+0x8c>
          mem = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e001      	b.n	8004f1e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10b      	bne.n	8004f3c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	9100      	str	r1, [sp, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f970 	bl	8005218 <xQueueGenericCreateStatic>
 8004f38:	61f8      	str	r0, [r7, #28]
 8004f3a:	e008      	b.n	8004f4e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004f42:	2200      	movs	r2, #0
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f9de 	bl	8005308 <xQueueGenericCreate>
 8004f4c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e001      	b.n	8004f66 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	69f8      	ldr	r0, [r7, #28]
 8004f6a:	f000 fdf1 	bl	8005b50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8004f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	601a      	str	r2, [r3, #0]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	200000a4 	.word	0x200000a4
 8004fa8:	20000100 	.word	0x20000100

08004fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <vApplicationGetTimerTaskMemory+0x30>)
 8004fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000300 	.word	0x20000300
 8004fdc:	2000035c 	.word	0x2000035c

08004fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0208 	add.w	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 0208 	add.w	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f103 0208 	add.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d103      	bne.n	80050a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e00c      	b.n	80050bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3308      	adds	r3, #8
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e002      	b.n	80050b0 <vListInsert+0x2e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d2f6      	bcs.n	80050aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6892      	ldr	r2, [r2, #8]
 800510a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6852      	ldr	r2, [r2, #4]
 8005114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d103      	bne.n	8005128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005172:	f002 fb37 	bl	80077e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	3b01      	subs	r3, #1
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	22ff      	movs	r2, #255	; 0xff
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d114      	bne.n	80051f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f979 	bl	80064cc <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d012      	beq.n	8005206 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <xQueueGenericReset+0xcc>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	e009      	b.n	8005206 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3310      	adds	r3, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fef2 	bl	8004fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff feed 	bl	8004fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005206:	f002 fb1d 	bl	8007844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800520a:	2301      	movs	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <xQueueGenericCreateStatic+0x52>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <xQueueGenericCreateStatic+0x56>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <xQueueGenericCreateStatic+0x58>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	623b      	str	r3, [r7, #32]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <xQueueGenericCreateStatic+0x7e>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <xQueueGenericCreateStatic+0x82>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <xQueueGenericCreateStatic+0x84>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fb      	str	r3, [r7, #28]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052b6:	2350      	movs	r3, #80	; 0x50
 80052b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b50      	cmp	r3, #80	; 0x50
 80052be:	d00a      	beq.n	80052d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61bb      	str	r3, [r7, #24]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f83f 	bl	800537c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005300:	4618      	mov	r0, r3
 8005302:	3730      	adds	r7, #48	; 0x30
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericCreate+0x2a>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	613b      	str	r3, [r7, #16]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3350      	adds	r3, #80	; 0x50
 8005340:	4618      	mov	r0, r3
 8005342:	f002 fb71 	bl	8007a28 <pvPortMalloc>
 8005346:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d011      	beq.n	8005372 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	3350      	adds	r3, #80	; 0x50
 8005356:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f805 	bl	800537c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005372:	69bb      	ldr	r3, [r7, #24]
	}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e002      	b.n	800539e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053aa:	2101      	movs	r1, #1
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	f7ff fecb 	bl	8005148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueGenericSend+0x32>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <xQueueGenericSend+0x40>
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <xQueueGenericSend+0x44>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <xQueueGenericSend+0x46>
 8005408:	2300      	movs	r3, #0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <xQueueGenericSend+0x60>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d103      	bne.n	8005432 <xQueueGenericSend+0x6e>
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <xQueueGenericSend+0x72>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueGenericSend+0x74>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueGenericSend+0x8e>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	623b      	str	r3, [r7, #32]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005452:	f001 f9f9 	bl	8006848 <xTaskGetSchedulerState>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <xQueueGenericSend+0x9e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <xQueueGenericSend+0xa2>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <xQueueGenericSend+0xa4>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <xQueueGenericSend+0xbe>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	61fb      	str	r3, [r7, #28]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005482:	f002 f9af 	bl	80077e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <xQueueGenericSend+0xd4>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d129      	bne.n	80054ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549e:	f000 fa47 	bl	8005930 <prvCopyDataToQueue>
 80054a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f80b 	bl	80064cc <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054bc:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <xQueueGenericSend+0x1f8>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	e00a      	b.n	80054e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054d4:	4b39      	ldr	r3, [pc, #228]	; (80055bc <xQueueGenericSend+0x1f8>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054e4:	f002 f9ae 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e063      	b.n	80055b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054f2:	f002 f9a7 	bl	8007844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e05c      	b.n	80055b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4618      	mov	r0, r3
 8005506:	f001 f845 	bl	8006594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800550a:	2301      	movs	r3, #1
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800550e:	f002 f999 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005512:	f000 fdb7 	bl	8006084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005516:	f002 f965 	bl	80077e4 <vPortEnterCritical>
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005520:	b25b      	sxtb	r3, r3
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d103      	bne.n	8005530 <xQueueGenericSend+0x16c>
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005536:	b25b      	sxtb	r3, r3
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d103      	bne.n	8005546 <xQueueGenericSend+0x182>
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005546:	f002 f97d 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800554a:	1d3a      	adds	r2, r7, #4
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f834 	bl	80065c0 <xTaskCheckForTimeOut>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d124      	bne.n	80055a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800555e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005560:	f000 fade 	bl	8005b20 <prvIsQueueFull>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	3310      	adds	r3, #16
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f000 ff5a 	bl	800642c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800557a:	f000 fa69 	bl	8005a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800557e:	f000 fd8f 	bl	80060a0 <xTaskResumeAll>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f af7c 	bne.w	8005482 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <xQueueGenericSend+0x1f8>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	e772      	b.n	8005482 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fa57 	bl	8005a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055a2:	f000 fd7d 	bl	80060a0 <xTaskResumeAll>
 80055a6:	e76c      	b.n	8005482 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055aa:	f000 fa51 	bl	8005a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ae:	f000 fd77 	bl	80060a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3738      	adds	r7, #56	; 0x38
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b090      	sub	sp, #64	; 0x40
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d103      	bne.n	80055fc <xQueueGenericSendFromISR+0x3c>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <xQueueGenericSendFromISR+0x40>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <xQueueGenericSendFromISR+0x42>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d103      	bne.n	800562a <xQueueGenericSendFromISR+0x6a>
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <xQueueGenericSendFromISR+0x6e>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericSendFromISR+0x70>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	623b      	str	r3, [r7, #32]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800564a:	f002 f9ad 	bl	80079a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800564e:	f3ef 8211 	mrs	r2, BASEPRI
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61fa      	str	r2, [r7, #28]
 8005664:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005666:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <xQueueGenericSendFromISR+0xbc>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d12f      	bne.n	80056dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005692:	f000 f94d 	bl	8005930 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005696:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d112      	bne.n	80056c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d016      	beq.n	80056d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 ff0d 	bl	80064cc <xTaskRemoveFromEventList>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e007      	b.n	80056d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	b25a      	sxtb	r2, r3
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056d6:	2301      	movs	r3, #1
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056da:	e001      	b.n	80056e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3740      	adds	r7, #64	; 0x40
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	; 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <xQueueReceive+0x30>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	623b      	str	r3, [r7, #32]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <xQueueReceive+0x3e>
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <xQueueReceive+0x42>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueReceive+0x44>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueReceive+0x5e>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fb      	str	r3, [r7, #28]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005756:	f001 f877 	bl	8006848 <xTaskGetSchedulerState>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <xQueueReceive+0x6e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <xQueueReceive+0x72>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <xQueueReceive+0x74>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <xQueueReceive+0x8e>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	61bb      	str	r3, [r7, #24]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005786:	f002 f82d 	bl	80077e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01f      	beq.n	80057d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579a:	f000 f933 	bl	8005a04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00f      	beq.n	80057ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	3310      	adds	r3, #16
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fe8a 	bl	80064cc <xTaskRemoveFromEventList>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057be:	4b3d      	ldr	r3, [pc, #244]	; (80058b4 <xQueueReceive+0x1bc>)
 80057c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057ce:	f002 f839 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e069      	b.n	80058aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057dc:	f002 f832 	bl	8007844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e062      	b.n	80058aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fed0 	bl	8006594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057f8:	f002 f824 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057fc:	f000 fc42 	bl	8006084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005800:	f001 fff0 	bl	80077e4 <vPortEnterCritical>
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d103      	bne.n	800581a <xQueueReceive+0x122>
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005820:	b25b      	sxtb	r3, r3
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d103      	bne.n	8005830 <xQueueReceive+0x138>
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005830:	f002 f808 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005834:	1d3a      	adds	r2, r7, #4
 8005836:	f107 0310 	add.w	r3, r7, #16
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f000 febf 	bl	80065c0 <xTaskCheckForTimeOut>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d123      	bne.n	8005890 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584a:	f000 f953 	bl	8005af4 <prvIsQueueEmpty>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	3324      	adds	r3, #36	; 0x24
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fde5 	bl	800642c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005864:	f000 f8f4 	bl	8005a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005868:	f000 fc1a 	bl	80060a0 <xTaskResumeAll>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d189      	bne.n	8005786 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <xQueueReceive+0x1bc>)
 8005874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	e780      	b.n	8005786 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005886:	f000 f8e3 	bl	8005a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800588a:	f000 fc09 	bl	80060a0 <xTaskResumeAll>
 800588e:	e77a      	b.n	8005786 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005892:	f000 f8dd 	bl	8005a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005896:	f000 fc03 	bl	80060a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800589a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589c:	f000 f92a 	bl	8005af4 <prvIsQueueEmpty>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f43f af6f 	beq.w	8005786 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3730      	adds	r7, #48	; 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	60bb      	str	r3, [r7, #8]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80058dc:	f001 ff82 	bl	80077e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 ffad 	bl	8007844 <vPortExitCritical>

	return uxReturn;
 80058ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005922:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005924:	4618      	mov	r0, r3
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d14d      	bne.n	80059f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ff92 	bl	8006884 <xTaskPriorityDisinherit>
 8005960:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	e043      	b.n	80059f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d119      	bne.n	80059a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6858      	ldr	r0, [r3, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	461a      	mov	r2, r3
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	f002 fa8e 	bl	8007e9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d32b      	bcc.n	80059f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	e026      	b.n	80059f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68d8      	ldr	r0, [r3, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	461a      	mov	r2, r3
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	f002 fa74 	bl	8007e9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	425b      	negs	r3, r3
 80059be:	441a      	add	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d207      	bcs.n	80059e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	425b      	negs	r3, r3
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d105      	bne.n	80059f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059fa:	697b      	ldr	r3, [r7, #20]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	441a      	add	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d303      	bcc.n	8005a38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	461a      	mov	r2, r3
 8005a42:	6838      	ldr	r0, [r7, #0]
 8005a44:	f002 fa2a 	bl	8007e9c <memcpy>
	}
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a58:	f001 fec4 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a64:	e011      	b.n	8005a8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d012      	beq.n	8005a94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fd2a 	bl	80064cc <xTaskRemoveFromEventList>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a7e:	f000 fe01 	bl	8006684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dce9      	bgt.n	8005a66 <prvUnlockQueue+0x16>
 8005a92:	e000      	b.n	8005a96 <prvUnlockQueue+0x46>
					break;
 8005a94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	22ff      	movs	r2, #255	; 0xff
 8005a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a9e:	f001 fed1 	bl	8007844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aa2:	f001 fe9f 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aae:	e011      	b.n	8005ad4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d012      	beq.n	8005ade <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3310      	adds	r3, #16
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fd05 	bl	80064cc <xTaskRemoveFromEventList>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ac8:	f000 fddc 	bl	8006684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dce9      	bgt.n	8005ab0 <prvUnlockQueue+0x60>
 8005adc:	e000      	b.n	8005ae0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ade:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	22ff      	movs	r2, #255	; 0xff
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ae8:	f001 feac 	bl	8007844 <vPortExitCritical>
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005afc:	f001 fe72 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e001      	b.n	8005b12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b12:	f001 fe97 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8005b16:	68fb      	ldr	r3, [r7, #12]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b28:	f001 fe5c 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d102      	bne.n	8005b3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e001      	b.n	8005b42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b42:	f001 fe7f 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8005b46:	68fb      	ldr	r3, [r7, #12]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e014      	b.n	8005b8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b60:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <vQueueAddToRegistry+0x50>)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b6c:	490c      	ldr	r1, [pc, #48]	; (8005ba0 <vQueueAddToRegistry+0x50>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <vQueueAddToRegistry+0x50>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b82:	e006      	b.n	8005b92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b07      	cmp	r3, #7
 8005b8e:	d9e7      	bls.n	8005b60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20004aac 	.word	0x20004aac

08005ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bb4:	f001 fe16 	bl	80077e4 <vPortEnterCritical>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d103      	bne.n	8005bce <vQueueWaitForMessageRestricted+0x2a>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d103      	bne.n	8005be4 <vQueueWaitForMessageRestricted+0x40>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be4:	f001 fe2e 	bl	8007844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fc3b 	bl	8006474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bfe:	6978      	ldr	r0, [r7, #20]
 8005c00:	f7ff ff26 	bl	8005a50 <prvUnlockQueue>
	}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	61fb      	str	r3, [r7, #28]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c52:	235c      	movs	r3, #92	; 0x5c
 8005c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b5c      	cmp	r3, #92	; 0x5c
 8005c5a:	d00a      	beq.n	8005c72 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61bb      	str	r3, [r7, #24]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01e      	beq.n	8005cb8 <xTaskCreateStatic+0xac>
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01b      	beq.n	8005cb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c92:	2300      	movs	r3, #0
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	f107 0314 	add.w	r3, r7, #20
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f850 	bl	8005d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb2:	f000 f8dd 	bl	8005e70 <prvAddNewTaskToReadyList>
 8005cb6:	e001      	b.n	8005cbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cbc:	697b      	ldr	r3, [r7, #20]
	}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3728      	adds	r7, #40	; 0x28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b08c      	sub	sp, #48	; 0x30
 8005cca:	af04      	add	r7, sp, #16
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fea4 	bl	8007a28 <pvPortMalloc>
 8005ce0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00e      	beq.n	8005d06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ce8:	205c      	movs	r0, #92	; 0x5c
 8005cea:	f001 fe9d 	bl	8007a28 <pvPortMalloc>
 8005cee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfc:	e005      	b.n	8005d0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f001 ff5e 	bl	8007bc0 <vPortFree>
 8005d04:	e001      	b.n	8005d0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d017      	beq.n	8005d40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9303      	str	r3, [sp, #12]
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f80e 	bl	8005d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d34:	69f8      	ldr	r0, [r7, #28]
 8005d36:	f000 f89b 	bl	8005e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e002      	b.n	8005d46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d46:	69bb      	ldr	r3, [r7, #24]
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	461a      	mov	r2, r3
 8005d68:	21a5      	movs	r1, #165	; 0xa5
 8005d6a:	f002 f8a5 	bl	8007eb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	617b      	str	r3, [r7, #20]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01f      	beq.n	8005dee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e012      	b.n	8005dda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	7819      	ldrb	r1, [r3, #0]
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3334      	adds	r3, #52	; 0x34
 8005dc4:	460a      	mov	r2, r1
 8005dc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d9e9      	bls.n	8005db4 <prvInitialiseNewTask+0x64>
 8005de0:	e000      	b.n	8005de4 <prvInitialiseNewTask+0x94>
			{
				break;
 8005de2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dec:	e003      	b.n	8005df6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	2b37      	cmp	r3, #55	; 0x37
 8005dfa:	d901      	bls.n	8005e00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dfc:	2337      	movs	r3, #55	; 0x37
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2200      	movs	r2, #0
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff f902 	bl	8005020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	3318      	adds	r3, #24
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff f8fd 	bl	8005020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2200      	movs	r2, #0
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68f9      	ldr	r1, [r7, #12]
 8005e4e:	69b8      	ldr	r0, [r7, #24]
 8005e50:	f001 fb9e 	bl	8007590 <pxPortInitialiseStack>
 8005e54:	4602      	mov	r2, r0
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e66:	bf00      	nop
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e78:	f001 fcb4 	bl	80077e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e7c:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <prvAddNewTaskToReadyList+0xc4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <prvAddNewTaskToReadyList+0xc4>)
 8005e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e86:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e94:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <prvAddNewTaskToReadyList+0xc4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d110      	bne.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e9c:	f000 fc16 	bl	80066cc <prvInitialiseTaskLists>
 8005ea0:	e00d      	b.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ea2:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <prvAddNewTaskToReadyList+0xcc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d802      	bhi.n	8005ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <prvAddNewTaskToReadyList+0xd0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <prvAddNewTaskToReadyList+0xd0>)
 8005ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <prvAddNewTaskToReadyList+0xd0>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <prvAddNewTaskToReadyList+0xd4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d903      	bls.n	8005ee4 <prvAddNewTaskToReadyList+0x74>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <prvAddNewTaskToReadyList+0xd4>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvAddNewTaskToReadyList+0xd8>)
 8005ef2:	441a      	add	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7ff f89d 	bl	800503a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f00:	f001 fca0 	bl	8007844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <prvAddNewTaskToReadyList+0xcc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <prvAddNewTaskToReadyList+0xc8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d207      	bcs.n	8005f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <prvAddNewTaskToReadyList+0xdc>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000c30 	.word	0x20000c30
 8005f38:	2000075c 	.word	0x2000075c
 8005f3c:	20000c3c 	.word	0x20000c3c
 8005f40:	20000c4c 	.word	0x20000c4c
 8005f44:	20000c38 	.word	0x20000c38
 8005f48:	20000760 	.word	0x20000760
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d017      	beq.n	8005f92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f62:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <vTaskDelay+0x60>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <vTaskDelay+0x30>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	60bb      	str	r3, [r7, #8]
}
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f80:	f000 f880 	bl	8006084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f84:	2100      	movs	r1, #0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fe7c 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f8c:	f000 f888 	bl	80060a0 <xTaskResumeAll>
 8005f90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <vTaskDelay+0x64>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000c58 	.word	0x20000c58
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fc6:	463a      	mov	r2, r7
 8005fc8:	1d39      	adds	r1, r7, #4
 8005fca:	f107 0308 	add.w	r3, r7, #8
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe ffd2 	bl	8004f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	9202      	str	r2, [sp, #8]
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	4921      	ldr	r1, [pc, #132]	; (800606c <vTaskStartScheduler+0xb4>)
 8005fe8:	4821      	ldr	r0, [pc, #132]	; (8006070 <vTaskStartScheduler+0xb8>)
 8005fea:	f7ff fe0f 	bl	8005c0c <xTaskCreateStatic>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4a20      	ldr	r2, [pc, #128]	; (8006074 <vTaskStartScheduler+0xbc>)
 8005ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <vTaskStartScheduler+0xbc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e001      	b.n	8006006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d102      	bne.n	8006012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800600c:	f000 fe8e 	bl	8006d2c <xTimerCreateTimerTask>
 8006010:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d116      	bne.n	8006046 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	613b      	str	r3, [r7, #16]
}
 800602a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800602c:	4b12      	ldr	r3, [pc, #72]	; (8006078 <vTaskStartScheduler+0xc0>)
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <vTaskStartScheduler+0xc4>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <vTaskStartScheduler+0xc8>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006040:	f001 fb2e 	bl	80076a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006044:	e00e      	b.n	8006064 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d10a      	bne.n	8006064 <vTaskStartScheduler+0xac>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60fb      	str	r3, [r7, #12]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <vTaskStartScheduler+0xaa>
}
 8006064:	bf00      	nop
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	08008620 	.word	0x08008620
 8006070:	0800669d 	.word	0x0800669d
 8006074:	20000c54 	.word	0x20000c54
 8006078:	20000c50 	.word	0x20000c50
 800607c:	20000c3c 	.word	0x20000c3c
 8006080:	20000c34 	.word	0x20000c34

08006084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <vTaskSuspendAll+0x18>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	4a03      	ldr	r2, [pc, #12]	; (800609c <vTaskSuspendAll+0x18>)
 8006090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006092:	bf00      	nop
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000c58 	.word	0x20000c58

080060a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060ae:	4b42      	ldr	r3, [pc, #264]	; (80061b8 <xTaskResumeAll+0x118>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <xTaskResumeAll+0x2c>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	603b      	str	r3, [r7, #0]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060cc:	f001 fb8a 	bl	80077e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060d0:	4b39      	ldr	r3, [pc, #228]	; (80061b8 <xTaskResumeAll+0x118>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <xTaskResumeAll+0x118>)
 80060d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <xTaskResumeAll+0x118>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d162      	bne.n	80061a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <xTaskResumeAll+0x11c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d05e      	beq.n	80061a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ea:	e02f      	b.n	800614c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <xTaskResumeAll+0x120>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3318      	adds	r3, #24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fffb 	bl	80050f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fff6 	bl	80050f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <xTaskResumeAll+0x124>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <xTaskResumeAll+0x7c>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <xTaskResumeAll+0x124>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <xTaskResumeAll+0x128>)
 800612a:	441a      	add	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe ff81 	bl	800503a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	4b23      	ldr	r3, [pc, #140]	; (80061cc <xTaskResumeAll+0x12c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006146:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <xTaskResumeAll+0x130>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800614c:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <xTaskResumeAll+0x120>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1cb      	bne.n	80060ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800615a:	f000 fb55 	bl	8006808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <xTaskResumeAll+0x134>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d010      	beq.n	800618c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800616a:	f000 f847 	bl	80061fc <xTaskIncrementTick>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006174:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <xTaskResumeAll+0x130>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3b01      	subs	r3, #1
 800617e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f1      	bne.n	800616a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006186:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <xTaskResumeAll+0x134>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <xTaskResumeAll+0x130>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <xTaskResumeAll+0x138>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061a8:	f001 fb4c 	bl	8007844 <vPortExitCritical>

	return xAlreadyYielded;
 80061ac:	68bb      	ldr	r3, [r7, #8]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000c58 	.word	0x20000c58
 80061bc:	20000c30 	.word	0x20000c30
 80061c0:	20000bf0 	.word	0x20000bf0
 80061c4:	20000c38 	.word	0x20000c38
 80061c8:	20000760 	.word	0x20000760
 80061cc:	2000075c 	.word	0x2000075c
 80061d0:	20000c44 	.word	0x20000c44
 80061d4:	20000c40 	.word	0x20000c40
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <xTaskGetTickCount+0x1c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061e8:	687b      	ldr	r3, [r7, #4]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000c34 	.word	0x20000c34

080061fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006206:	4b4f      	ldr	r3, [pc, #316]	; (8006344 <xTaskIncrementTick+0x148>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 808f 	bne.w	800632e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006210:	4b4d      	ldr	r3, [pc, #308]	; (8006348 <xTaskIncrementTick+0x14c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006218:	4a4b      	ldr	r2, [pc, #300]	; (8006348 <xTaskIncrementTick+0x14c>)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d120      	bne.n	8006266 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006224:	4b49      	ldr	r3, [pc, #292]	; (800634c <xTaskIncrementTick+0x150>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <xTaskIncrementTick+0x48>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	603b      	str	r3, [r7, #0]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <xTaskIncrementTick+0x46>
 8006244:	4b41      	ldr	r3, [pc, #260]	; (800634c <xTaskIncrementTick+0x150>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	4b41      	ldr	r3, [pc, #260]	; (8006350 <xTaskIncrementTick+0x154>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3f      	ldr	r2, [pc, #252]	; (800634c <xTaskIncrementTick+0x150>)
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4a3f      	ldr	r2, [pc, #252]	; (8006350 <xTaskIncrementTick+0x154>)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <xTaskIncrementTick+0x158>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	4a3d      	ldr	r2, [pc, #244]	; (8006354 <xTaskIncrementTick+0x158>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	f000 fad1 	bl	8006808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006266:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <xTaskIncrementTick+0x15c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	429a      	cmp	r2, r3
 800626e:	d349      	bcc.n	8006304 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006270:	4b36      	ldr	r3, [pc, #216]	; (800634c <xTaskIncrementTick+0x150>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <xTaskIncrementTick+0x15c>)
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	601a      	str	r2, [r3, #0]
					break;
 8006282:	e03f      	b.n	8006304 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006284:	4b31      	ldr	r3, [pc, #196]	; (800634c <xTaskIncrementTick+0x150>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d203      	bcs.n	80062a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800629c:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <xTaskIncrementTick+0x15c>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062a2:	e02f      	b.n	8006304 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe ff23 	bl	80050f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3318      	adds	r3, #24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe ff1a 	bl	80050f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <xTaskIncrementTick+0x160>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d903      	bls.n	80062d4 <xTaskIncrementTick+0xd8>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a22      	ldr	r2, [pc, #136]	; (800635c <xTaskIncrementTick+0x160>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <xTaskIncrementTick+0x164>)
 80062e2:	441a      	add	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fe fea5 	bl	800503a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <xTaskIncrementTick+0x168>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3b8      	bcc.n	8006270 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006302:	e7b5      	b.n	8006270 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006304:	4b17      	ldr	r3, [pc, #92]	; (8006364 <xTaskIncrementTick+0x168>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	4915      	ldr	r1, [pc, #84]	; (8006360 <xTaskIncrementTick+0x164>)
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d901      	bls.n	8006320 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <xTaskIncrementTick+0x16c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e004      	b.n	8006338 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800632e:	4b0f      	ldr	r3, [pc, #60]	; (800636c <xTaskIncrementTick+0x170>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a0d      	ldr	r2, [pc, #52]	; (800636c <xTaskIncrementTick+0x170>)
 8006336:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006338:	697b      	ldr	r3, [r7, #20]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000c58 	.word	0x20000c58
 8006348:	20000c34 	.word	0x20000c34
 800634c:	20000be8 	.word	0x20000be8
 8006350:	20000bec 	.word	0x20000bec
 8006354:	20000c48 	.word	0x20000c48
 8006358:	20000c50 	.word	0x20000c50
 800635c:	20000c38 	.word	0x20000c38
 8006360:	20000760 	.word	0x20000760
 8006364:	2000075c 	.word	0x2000075c
 8006368:	20000c44 	.word	0x20000c44
 800636c:	20000c40 	.word	0x20000c40

08006370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006376:	4b28      	ldr	r3, [pc, #160]	; (8006418 <vTaskSwitchContext+0xa8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800637e:	4b27      	ldr	r3, [pc, #156]	; (800641c <vTaskSwitchContext+0xac>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006384:	e041      	b.n	800640a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006386:	4b25      	ldr	r3, [pc, #148]	; (800641c <vTaskSwitchContext+0xac>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638c:	4b24      	ldr	r3, [pc, #144]	; (8006420 <vTaskSwitchContext+0xb0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e010      	b.n	80063b6 <vTaskSwitchContext+0x46>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <vTaskSwitchContext+0x3e>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	491b      	ldr	r1, [pc, #108]	; (8006424 <vTaskSwitchContext+0xb4>)
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0e4      	beq.n	8006394 <vTaskSwitchContext+0x24>
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <vTaskSwitchContext+0xb4>)
 80063d6:	4413      	add	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	3308      	adds	r3, #8
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d104      	bne.n	80063fa <vTaskSwitchContext+0x8a>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a09      	ldr	r2, [pc, #36]	; (8006428 <vTaskSwitchContext+0xb8>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	4a06      	ldr	r2, [pc, #24]	; (8006420 <vTaskSwitchContext+0xb0>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6013      	str	r3, [r2, #0]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000c58 	.word	0x20000c58
 800641c:	20000c44 	.word	0x20000c44
 8006420:	20000c38 	.word	0x20000c38
 8006424:	20000760 	.word	0x20000760
 8006428:	2000075c 	.word	0x2000075c

0800642c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <vTaskPlaceOnEventList+0x44>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3318      	adds	r3, #24
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fe fe11 	bl	8005082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006460:	2101      	movs	r1, #1
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f000 fc0e 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000075c 	.word	0x2000075c

08006474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3318      	adds	r3, #24
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7fe fdc8 	bl	800503a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f000 fbe3 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
	}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	2000075c 	.word	0x2000075c

080064cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60fb      	str	r3, [r7, #12]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	3318      	adds	r3, #24
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fdf9 	bl	80050f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006502:	4b1e      	ldr	r3, [pc, #120]	; (800657c <xTaskRemoveFromEventList+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11d      	bne.n	8006546 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fdf0 	bl	80050f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <xTaskRemoveFromEventList+0xb4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d903      	bls.n	8006528 <xTaskRemoveFromEventList+0x5c>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a16      	ldr	r2, [pc, #88]	; (8006580 <xTaskRemoveFromEventList+0xb4>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a13      	ldr	r2, [pc, #76]	; (8006584 <xTaskRemoveFromEventList+0xb8>)
 8006536:	441a      	add	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe fd7b 	bl	800503a <vListInsertEnd>
 8006544:	e005      	b.n	8006552 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3318      	adds	r3, #24
 800654a:	4619      	mov	r1, r3
 800654c:	480e      	ldr	r0, [pc, #56]	; (8006588 <xTaskRemoveFromEventList+0xbc>)
 800654e:	f7fe fd74 	bl	800503a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <xTaskRemoveFromEventList+0xc0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d905      	bls.n	800656c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <xTaskRemoveFromEventList+0xc4>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e001      	b.n	8006570 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006570:	697b      	ldr	r3, [r7, #20]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000c58 	.word	0x20000c58
 8006580:	20000c38 	.word	0x20000c38
 8006584:	20000760 	.word	0x20000760
 8006588:	20000bf0 	.word	0x20000bf0
 800658c:	2000075c 	.word	0x2000075c
 8006590:	20000c44 	.word	0x20000c44

08006594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <vTaskInternalSetTimeOutState+0x24>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <vTaskInternalSetTimeOutState+0x28>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000c48 	.word	0x20000c48
 80065bc:	20000c34 	.word	0x20000c34

080065c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	613b      	str	r3, [r7, #16]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006602:	f001 f8ef 	bl	80077e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <xTaskCheckForTimeOut+0xbc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d102      	bne.n	8006626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e023      	b.n	800666e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <xTaskCheckForTimeOut+0xc0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d007      	beq.n	8006642 <xTaskCheckForTimeOut+0x82>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e015      	b.n	800666e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	429a      	cmp	r2, r3
 800664a:	d20b      	bcs.n	8006664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff9b 	bl	8006594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	e004      	b.n	800666e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800666a:	2301      	movs	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800666e:	f001 f8e9 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8006672:	69fb      	ldr	r3, [r7, #28]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000c34 	.word	0x20000c34
 8006680:	20000c48 	.word	0x20000c48

08006684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006688:	4b03      	ldr	r3, [pc, #12]	; (8006698 <vTaskMissedYield+0x14>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000c44 	.word	0x20000c44

0800669c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066a4:	f000 f852 	bl	800674c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <prvIdleTask+0x28>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d9f9      	bls.n	80066a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <prvIdleTask+0x2c>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066c0:	e7f0      	b.n	80066a4 <prvIdleTask+0x8>
 80066c2:	bf00      	nop
 80066c4:	20000760 	.word	0x20000760
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e00c      	b.n	80066f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a12      	ldr	r2, [pc, #72]	; (800672c <prvInitialiseTaskLists+0x60>)
 80066e4:	4413      	add	r3, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fc7a 	bl	8004fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3301      	adds	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b37      	cmp	r3, #55	; 0x37
 80066f6:	d9ef      	bls.n	80066d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066f8:	480d      	ldr	r0, [pc, #52]	; (8006730 <prvInitialiseTaskLists+0x64>)
 80066fa:	f7fe fc71 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066fe:	480d      	ldr	r0, [pc, #52]	; (8006734 <prvInitialiseTaskLists+0x68>)
 8006700:	f7fe fc6e 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006704:	480c      	ldr	r0, [pc, #48]	; (8006738 <prvInitialiseTaskLists+0x6c>)
 8006706:	f7fe fc6b 	bl	8004fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800670a:	480c      	ldr	r0, [pc, #48]	; (800673c <prvInitialiseTaskLists+0x70>)
 800670c:	f7fe fc68 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006710:	480b      	ldr	r0, [pc, #44]	; (8006740 <prvInitialiseTaskLists+0x74>)
 8006712:	f7fe fc65 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <prvInitialiseTaskLists+0x78>)
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <prvInitialiseTaskLists+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <prvInitialiseTaskLists+0x7c>)
 800671e:	4a05      	ldr	r2, [pc, #20]	; (8006734 <prvInitialiseTaskLists+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000760 	.word	0x20000760
 8006730:	20000bc0 	.word	0x20000bc0
 8006734:	20000bd4 	.word	0x20000bd4
 8006738:	20000bf0 	.word	0x20000bf0
 800673c:	20000c04 	.word	0x20000c04
 8006740:	20000c1c 	.word	0x20000c1c
 8006744:	20000be8 	.word	0x20000be8
 8006748:	20000bec 	.word	0x20000bec

0800674c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006752:	e019      	b.n	8006788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006754:	f001 f846 	bl	80077e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	4b10      	ldr	r3, [pc, #64]	; (800679c <prvCheckTasksWaitingTermination+0x50>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fcc5 	bl	80050f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3b01      	subs	r3, #1
 8006770:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 8006772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800677c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800677e:	f001 f861 	bl	8007844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f810 	bl	80067a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e1      	bne.n	8006754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000c04 	.word	0x20000c04
 80067a0:	20000c30 	.word	0x20000c30
 80067a4:	20000c18 	.word	0x20000c18

080067a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d108      	bne.n	80067cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f9fe 	bl	8007bc0 <vPortFree>
				vPortFree( pxTCB );
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f9fb 	bl	8007bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ca:	e018      	b.n	80067fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d103      	bne.n	80067de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 f9f2 	bl	8007bc0 <vPortFree>
	}
 80067dc:	e00f      	b.n	80067fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d00a      	beq.n	80067fe <prvDeleteTCB+0x56>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	60fb      	str	r3, [r7, #12]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <prvDeleteTCB+0x54>
	}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <prvResetNextTaskUnblockTime+0x38>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <prvResetNextTaskUnblockTime+0x3c>)
 800681a:	f04f 32ff 	mov.w	r2, #4294967295
 800681e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006820:	e008      	b.n	8006834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <prvResetNextTaskUnblockTime+0x38>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a04      	ldr	r2, [pc, #16]	; (8006844 <prvResetNextTaskUnblockTime+0x3c>)
 8006832:	6013      	str	r3, [r2, #0]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000be8 	.word	0x20000be8
 8006844:	20000c50 	.word	0x20000c50

08006848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <xTaskGetSchedulerState+0x34>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006856:	2301      	movs	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	e008      	b.n	800686e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <xTaskGetSchedulerState+0x38>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006864:	2302      	movs	r3, #2
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e001      	b.n	800686e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800686e:	687b      	ldr	r3, [r7, #4]
	}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	20000c3c 	.word	0x20000c3c
 8006880:	20000c58 	.word	0x20000c58

08006884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d056      	beq.n	8006948 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <xTaskPriorityDisinherit+0xd0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d00a      	beq.n	80068ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	60fb      	str	r3, [r7, #12]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60bb      	str	r3, [r7, #8]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	1e5a      	subs	r2, r3, #1
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d02c      	beq.n	8006948 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d128      	bne.n	8006948 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fbfa 	bl	80050f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <xTaskPriorityDisinherit+0xd4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d903      	bls.n	8006928 <xTaskPriorityDisinherit+0xa4>
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	4a0c      	ldr	r2, [pc, #48]	; (8006958 <xTaskPriorityDisinherit+0xd4>)
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <xTaskPriorityDisinherit+0xd8>)
 8006936:	441a      	add	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7fe fb7b 	bl	800503a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006948:	697b      	ldr	r3, [r7, #20]
	}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000075c 	.word	0x2000075c
 8006958:	20000c38 	.word	0x20000c38
 800695c:	20000760 	.word	0x20000760

08006960 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800696a:	f000 ff3b 	bl	80077e4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800696e:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <ulTaskNotifyTake+0x88>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	2b00      	cmp	r3, #0
 8006976:	d113      	bne.n	80069a0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006978:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <ulTaskNotifyTake+0x88>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006988:	2101      	movs	r1, #1
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f000 f97a 	bl	8006c84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006990:	4b16      	ldr	r3, [pc, #88]	; (80069ec <ulTaskNotifyTake+0x8c>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80069a0:	f000 ff50 	bl	8007844 <vPortExitCritical>

		taskENTER_CRITICAL();
 80069a4:	f000 ff1e 	bl	80077e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <ulTaskNotifyTake+0x88>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00c      	beq.n	80069d0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <ulTaskNotifyTake+0x88>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2200      	movs	r2, #0
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
 80069c4:	e004      	b.n	80069d0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80069c6:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <ulTaskNotifyTake+0x88>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	3a01      	subs	r2, #1
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <ulTaskNotifyTake+0x88>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80069da:	f000 ff33 	bl	8007844 <vPortExitCritical>

		return ulReturn;
 80069de:	68fb      	ldr	r3, [r7, #12]
	}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	2000075c 	.word	0x2000075c
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006a00:	2301      	movs	r3, #1
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xTaskGenericNotify+0x30>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61bb      	str	r3, [r7, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006a24:	f000 fede 	bl	80077e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a3c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d828      	bhi.n	8006a9e <xTaskGenericNotify+0xae>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <xTaskGenericNotify+0x64>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006abf 	.word	0x08006abf
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a77 	.word	0x08006a77
 8006a60:	08006a83 	.word	0x08006a83
 8006a64:	08006a8b 	.word	0x08006a8b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006a74:	e026      	b.n	8006ac4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006a80:	e020      	b.n	8006ac4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006a88:	e01c      	b.n	8006ac4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d003      	beq.n	8006a98 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006a96:	e015      	b.n	8006ac4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006a9c:	e012      	b.n	8006ac4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d00c      	beq.n	8006ac2 <xTaskGenericNotify+0xd2>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	617b      	str	r3, [r7, #20]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskGenericNotify+0xcc>
					break;
 8006abe:	bf00      	nop
 8006ac0:	e000      	b.n	8006ac4 <xTaskGenericNotify+0xd4>

					break;
 8006ac2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ac4:	7ffb      	ldrb	r3, [r7, #31]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d13a      	bne.n	8006b40 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fb10 	bl	80050f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <xTaskGenericNotify+0x160>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d903      	bls.n	8006ae8 <xTaskGenericNotify+0xf8>
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	4a1a      	ldr	r2, [pc, #104]	; (8006b50 <xTaskGenericNotify+0x160>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <xTaskGenericNotify+0x164>)
 8006af6:	441a      	add	r2, r3
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fe fa9b 	bl	800503a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <xTaskGenericNotify+0x132>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	613b      	str	r3, [r7, #16]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <xTaskGenericNotify+0x168>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d907      	bls.n	8006b40 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <xTaskGenericNotify+0x16c>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b40:	f000 fe80 	bl	8007844 <vPortExitCritical>

		return xReturn;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	; 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000c38 	.word	0x20000c38
 8006b54:	20000760 	.word	0x20000760
 8006b58:	2000075c 	.word	0x2000075c
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	61bb      	str	r3, [r7, #24]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b86:	f000 ff0f 	bl	80079a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8006b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	617a      	str	r2, [r7, #20]
 8006ba4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ba6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ba8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bb0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006bc4:	7ffb      	ldrb	r3, [r7, #31]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d146      	bne.n	8006c58 <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60fb      	str	r3, [r7, #12]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <vTaskNotifyGiveFromISR+0x10c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11d      	bne.n	8006c2c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fa7d 	bl	80050f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <vTaskNotifyGiveFromISR+0x110>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d903      	bls.n	8006c0e <vTaskNotifyGiveFromISR+0xae>
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <vTaskNotifyGiveFromISR+0x110>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a16      	ldr	r2, [pc, #88]	; (8006c74 <vTaskNotifyGiveFromISR+0x114>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe fa08 	bl	800503a <vListInsertEnd>
 8006c2a:	e005      	b.n	8006c38 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	3318      	adds	r3, #24
 8006c30:	4619      	mov	r1, r3
 8006c32:	4811      	ldr	r0, [pc, #68]	; (8006c78 <vTaskNotifyGiveFromISR+0x118>)
 8006c34:	f7fe fa01 	bl	800503a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <vTaskNotifyGiveFromISR+0x11c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d908      	bls.n	8006c58 <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <vTaskNotifyGiveFromISR+0x120>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f383 8811 	msr	BASEPRI, r3
}
 8006c62:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006c64:	bf00      	nop
 8006c66:	3728      	adds	r7, #40	; 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000c58 	.word	0x20000c58
 8006c70:	20000c38 	.word	0x20000c38
 8006c74:	20000760 	.word	0x20000760
 8006c78:	20000bf0 	.word	0x20000bf0
 8006c7c:	2000075c 	.word	0x2000075c
 8006c80:	20000c44 	.word	0x20000c44

08006c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c94:	4b20      	ldr	r3, [pc, #128]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fa2a 	bl	80050f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d10a      	bne.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cae:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4819      	ldr	r0, [pc, #100]	; (8006d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8006cb8:	f7fe f9bf 	bl	800503a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cbc:	e026      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d209      	bcs.n	8006cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe f9cd 	bl	8005082 <vListInsert>
}
 8006ce8:	e010      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fe f9c3 	bl	8005082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d202      	bcs.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d06:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000c34 	.word	0x20000c34
 8006d18:	2000075c 	.word	0x2000075c
 8006d1c:	20000c1c 	.word	0x20000c1c
 8006d20:	20000bec 	.word	0x20000bec
 8006d24:	20000be8 	.word	0x20000be8
 8006d28:	20000c50 	.word	0x20000c50

08006d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d36:	f000 fba1 	bl	800747c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <xTimerCreateTimerTask+0x80>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d021      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d4a:	1d3a      	adds	r2, r7, #4
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	f107 030c 	add.w	r3, r7, #12
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe f929 	bl	8004fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	9202      	str	r2, [sp, #8]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	2302      	movs	r3, #2
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	4910      	ldr	r1, [pc, #64]	; (8006db0 <xTimerCreateTimerTask+0x84>)
 8006d6e:	4811      	ldr	r0, [pc, #68]	; (8006db4 <xTimerCreateTimerTask+0x88>)
 8006d70:	f7fe ff4c 	bl	8005c0c <xTaskCreateStatic>
 8006d74:	4603      	mov	r3, r0
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <xTimerCreateTimerTask+0x8c>)
 8006d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <xTimerCreateTimerTask+0x8c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006da2:	697b      	ldr	r3, [r7, #20]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000c8c 	.word	0x20000c8c
 8006db0:	08008628 	.word	0x08008628
 8006db4:	08007025 	.word	0x08007025
 8006db8:	20000c90 	.word	0x20000c90

08006dbc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006dca:	202c      	movs	r0, #44	; 0x2c
 8006dcc:	f000 fe2c 	bl	8007a28 <pvPortMalloc>
 8006dd0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f843 	bl	8006e7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006df4:	697b      	ldr	r3, [r7, #20]
	}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b08a      	sub	sp, #40	; 0x28
 8006e02:	af02      	add	r7, sp, #8
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006e0c:	232c      	movs	r3, #44	; 0x2c
 8006e0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b2c      	cmp	r3, #44	; 0x2c
 8006e14:	d00a      	beq.n	8006e2c <xTimerCreateStatic+0x2e>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	61bb      	str	r3, [r7, #24]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xTimerCreateStatic+0x4c>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	617b      	str	r3, [r7, #20]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f805 	bl	8006e7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006e70:	69fb      	ldr	r3, [r7, #28]
	}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	617b      	str	r3, [r7, #20]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01e      	beq.n	8006ee8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006eaa:	f000 fae7 	bl	800747c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	6a3a      	ldr	r2, [r7, #32]
 8006ec4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe f8a8 	bl	8005020 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006edc:	f043 0304 	orr.w	r3, r3, #4
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f1e:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <xTimerGenericCommand+0x98>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d02a      	beq.n	8006f7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	dc18      	bgt.n	8006f6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f38:	f7ff fc86 	bl	8006848 <xTaskGetSchedulerState>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d109      	bne.n	8006f56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <xTimerGenericCommand+0x98>)
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	f107 0110 	add.w	r1, r7, #16
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4e:	f7fe fa39 	bl	80053c4 <xQueueGenericSend>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
 8006f54:	e012      	b.n	8006f7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <xTimerGenericCommand+0x98>)
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f107 0110 	add.w	r1, r7, #16
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2200      	movs	r2, #0
 8006f62:	f7fe fa2f 	bl	80053c4 <xQueueGenericSend>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24
 8006f68:	e008      	b.n	8006f7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <xTimerGenericCommand+0x98>)
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f107 0110 	add.w	r1, r7, #16
 8006f72:	2300      	movs	r3, #0
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	f7fe fb23 	bl	80055c0 <xQueueGenericSendFromISR>
 8006f7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000c8c 	.word	0x20000c8c

08006f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f96:	4b22      	ldr	r3, [pc, #136]	; (8007020 <prvProcessExpiredTimer+0x94>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe f8a5 	bl	80050f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d022      	beq.n	8006ffe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	18d1      	adds	r1, r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	6978      	ldr	r0, [r7, #20]
 8006fc6:	f000 f8d1 	bl	800716c <prvInsertTimerInActiveList>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01f      	beq.n	8007010 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f7ff ff88 	bl	8006ef0 <xTimerGenericCommand>
 8006fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d113      	bne.n	8007010 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60fb      	str	r3, [r7, #12]
}
 8006ffa:	bf00      	nop
 8006ffc:	e7fe      	b.n	8006ffc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	6978      	ldr	r0, [r7, #20]
 8007016:	4798      	blx	r3
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000c84 	.word	0x20000c84

08007024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800702c:	f107 0308 	add.w	r3, r7, #8
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f857 	bl	80070e4 <prvGetNextExpireTime>
 8007036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4619      	mov	r1, r3
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f803 	bl	8007048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007042:	f000 f8d5 	bl	80071f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007046:	e7f1      	b.n	800702c <prvTimerTask+0x8>

08007048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007052:	f7ff f817 	bl	8006084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007056:	f107 0308 	add.w	r3, r7, #8
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f866 	bl	800712c <prvSampleTimeNow>
 8007060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d130      	bne.n	80070ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <prvProcessTimerOrBlockTask+0x3c>
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	429a      	cmp	r2, r3
 8007074:	d806      	bhi.n	8007084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007076:	f7ff f813 	bl	80060a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ff85 	bl	8006f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007082:	e024      	b.n	80070ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <prvProcessTimerOrBlockTask+0x90>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <prvProcessTimerOrBlockTask+0x50>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <prvProcessTimerOrBlockTask+0x52>
 8007098:	2300      	movs	r3, #0
 800709a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <prvProcessTimerOrBlockTask+0x94>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f7fe fd7b 	bl	8005ba4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070ae:	f7fe fff7 	bl	80060a0 <xTaskResumeAll>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <prvProcessTimerOrBlockTask+0x98>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
}
 80070c8:	e001      	b.n	80070ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070ca:	f7fe ffe9 	bl	80060a0 <xTaskResumeAll>
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000c88 	.word	0x20000c88
 80070dc:	20000c8c 	.word	0x20000c8c
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070ec:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <prvGetNextExpireTime+0x44>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <prvGetNextExpireTime+0x16>
 80070f6:	2201      	movs	r2, #1
 80070f8:	e000      	b.n	80070fc <prvGetNextExpireTime+0x18>
 80070fa:	2200      	movs	r2, #0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007108:	4b07      	ldr	r3, [pc, #28]	; (8007128 <prvGetNextExpireTime+0x44>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e001      	b.n	8007118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000c84 	.word	0x20000c84

0800712c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007134:	f7ff f852 	bl	80061dc <xTaskGetTickCount>
 8007138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800713a:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <prvSampleTimeNow+0x3c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d205      	bcs.n	8007150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007144:	f000 f936 	bl	80073b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e002      	b.n	8007156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007156:	4a04      	ldr	r2, [pc, #16]	; (8007168 <prvSampleTimeNow+0x3c>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800715c:	68fb      	ldr	r3, [r7, #12]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000c94 	.word	0x20000c94

0800716c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d812      	bhi.n	80071b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	d302      	bcc.n	80071a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e01b      	b.n	80071de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071a6:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <prvInsertTimerInActiveList+0x7c>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f7fd ff66 	bl	8005082 <vListInsert>
 80071b6:	e012      	b.n	80071de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d206      	bcs.n	80071ce <prvInsertTimerInActiveList+0x62>
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e007      	b.n	80071de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <prvInsertTimerInActiveList+0x80>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fd ff52 	bl	8005082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000c88 	.word	0x20000c88
 80071ec:	20000c84 	.word	0x20000c84

080071f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08e      	sub	sp, #56	; 0x38
 80071f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071f6:	e0ca      	b.n	800738e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da18      	bge.n	8007230 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071fe:	1d3b      	adds	r3, r7, #4
 8007200:	3304      	adds	r3, #4
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	61fb      	str	r3, [r7, #28]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007226:	6850      	ldr	r0, [r2, #4]
 8007228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800722a:	6892      	ldr	r2, [r2, #8]
 800722c:	4611      	mov	r1, r2
 800722e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f2c0 80aa 	blt.w	800738c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	3304      	adds	r3, #4
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd ff53 	bl	80050f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800724e:	463b      	mov	r3, r7
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff ff6b 	bl	800712c <prvSampleTimeNow>
 8007256:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b09      	cmp	r3, #9
 800725c:	f200 8097 	bhi.w	800738e <prvProcessReceivedCommands+0x19e>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <prvProcessReceivedCommands+0x78>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	08007291 	.word	0x08007291
 800726c:	08007291 	.word	0x08007291
 8007270:	08007291 	.word	0x08007291
 8007274:	08007305 	.word	0x08007305
 8007278:	08007319 	.word	0x08007319
 800727c:	08007363 	.word	0x08007363
 8007280:	08007291 	.word	0x08007291
 8007284:	08007291 	.word	0x08007291
 8007288:	08007305 	.word	0x08007305
 800728c:	08007319 	.word	0x08007319
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	18d1      	adds	r1, r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b0:	f7ff ff5c 	bl	800716c <prvInsertTimerInActiveList>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d069      	beq.n	800738e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d05e      	beq.n	800738e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	441a      	add	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	2100      	movs	r1, #0
 80072e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e2:	f7ff fe05 	bl	8006ef0 <xTimerGenericCommand>
 80072e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d14f      	bne.n	800738e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	61bb      	str	r3, [r7, #24]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007316:	e03a      	b.n	800738e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	617b      	str	r3, [r7, #20]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	18d1      	adds	r1, r2, r3
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735c:	f7ff ff06 	bl	800716c <prvInsertTimerInActiveList>
					break;
 8007360:	e015      	b.n	800738e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007372:	f000 fc25 	bl	8007bc0 <vPortFree>
 8007376:	e00a      	b.n	800738e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800738a:	e000      	b.n	800738e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800738c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800738e:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <prvProcessReceivedCommands+0x1c0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	1d39      	adds	r1, r7, #4
 8007394:	2200      	movs	r2, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe f9ae 	bl	80056f8 <xQueueReceive>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f47f af2a 	bne.w	80071f8 <prvProcessReceivedCommands+0x8>
	}
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	3730      	adds	r7, #48	; 0x30
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000c8c 	.word	0x20000c8c

080073b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ba:	e048      	b.n	800744e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073bc:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <prvSwitchTimerLists+0xc0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c6:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <prvSwitchTimerLists+0xc0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd fe8d 	bl	80050f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d02e      	beq.n	800744e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d90e      	bls.n	8007420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800740e:	4b19      	ldr	r3, [pc, #100]	; (8007474 <prvSwitchTimerLists+0xc0>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3304      	adds	r3, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7fd fe32 	bl	8005082 <vListInsert>
 800741e:	e016      	b.n	800744e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007420:	2300      	movs	r3, #0
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fd60 	bl	8006ef0 <xTimerGenericCommand>
 8007430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	603b      	str	r3, [r7, #0]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <prvSwitchTimerLists+0xc0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1b1      	bne.n	80073bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <prvSwitchTimerLists+0xc0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <prvSwitchTimerLists+0xc4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a04      	ldr	r2, [pc, #16]	; (8007474 <prvSwitchTimerLists+0xc0>)
 8007464:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007466:	4a04      	ldr	r2, [pc, #16]	; (8007478 <prvSwitchTimerLists+0xc4>)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6013      	str	r3, [r2, #0]
}
 800746c:	bf00      	nop
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000c84 	.word	0x20000c84
 8007478:	20000c88 	.word	0x20000c88

0800747c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007482:	f000 f9af 	bl	80077e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007486:	4b15      	ldr	r3, [pc, #84]	; (80074dc <prvCheckForValidListAndQueue+0x60>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d120      	bne.n	80074d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800748e:	4814      	ldr	r0, [pc, #80]	; (80074e0 <prvCheckForValidListAndQueue+0x64>)
 8007490:	f7fd fda6 	bl	8004fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007494:	4813      	ldr	r0, [pc, #76]	; (80074e4 <prvCheckForValidListAndQueue+0x68>)
 8007496:	f7fd fda3 	bl	8004fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <prvCheckForValidListAndQueue+0x6c>)
 800749c:	4a10      	ldr	r2, [pc, #64]	; (80074e0 <prvCheckForValidListAndQueue+0x64>)
 800749e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074a0:	4b12      	ldr	r3, [pc, #72]	; (80074ec <prvCheckForValidListAndQueue+0x70>)
 80074a2:	4a10      	ldr	r2, [pc, #64]	; (80074e4 <prvCheckForValidListAndQueue+0x68>)
 80074a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074a6:	2300      	movs	r3, #0
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <prvCheckForValidListAndQueue+0x74>)
 80074ac:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <prvCheckForValidListAndQueue+0x78>)
 80074ae:	2110      	movs	r1, #16
 80074b0:	200a      	movs	r0, #10
 80074b2:	f7fd feb1 	bl	8005218 <xQueueGenericCreateStatic>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4a08      	ldr	r2, [pc, #32]	; (80074dc <prvCheckForValidListAndQueue+0x60>)
 80074ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <prvCheckForValidListAndQueue+0x60>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <prvCheckForValidListAndQueue+0x60>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	490b      	ldr	r1, [pc, #44]	; (80074f8 <prvCheckForValidListAndQueue+0x7c>)
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fb40 	bl	8005b50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074d0:	f000 f9b8 	bl	8007844 <vPortExitCritical>
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000c8c 	.word	0x20000c8c
 80074e0:	20000c5c 	.word	0x20000c5c
 80074e4:	20000c70 	.word	0x20000c70
 80074e8:	20000c84 	.word	0x20000c84
 80074ec:	20000c88 	.word	0x20000c88
 80074f0:	20000d38 	.word	0x20000d38
 80074f4:	20000c98 	.word	0x20000c98
 80074f8:	08008630 	.word	0x08008630

080074fc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xTimerIsTimerActive+0x28>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007524:	f000 f95e 	bl	80077e4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e001      	b.n	8007540 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007540:	f000 f980 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8007544:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b086      	sub	sp, #24
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007576:	f000 f935 	bl	80077e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007580:	f000 f960 	bl	8007844 <vPortExitCritical>

	return pvReturn;
 8007584:	693b      	ldr	r3, [r7, #16]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3b04      	subs	r3, #4
 80075a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3b04      	subs	r3, #4
 80075ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0201 	bic.w	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075c0:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <pxPortInitialiseStack+0x64>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b14      	subs	r3, #20
 80075ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f06f 0202 	mvn.w	r2, #2
 80075de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3b20      	subs	r3, #32
 80075e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	080075f9 	.word	0x080075f9

080075f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <prvTaskExitError+0x54>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d00a      	beq.n	8007622 <prvTaskExitError+0x2a>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <prvTaskExitError+0x28>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60bb      	str	r3, [r7, #8]
}
 8007634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007636:	bf00      	nop
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0fc      	beq.n	8007638 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000014 	.word	0x20000014

08007650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	4770      	bx	lr
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst2>:
 8007670:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007678:	4808      	ldr	r0, [pc, #32]	; (800769c <prvPortStartFirstTask+0x24>)
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	6800      	ldr	r0, [r0, #0]
 800767e:	f380 8808 	msr	MSP, r0
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8814 	msr	CONTROL, r0
 800768a:	b662      	cpsie	i
 800768c:	b661      	cpsie	f
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	df00      	svc	0
 8007698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800769a:	bf00      	nop
 800769c:	e000ed08 	.word	0xe000ed08

080076a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076a6:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <xPortStartScheduler+0x120>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a46      	ldr	r2, [pc, #280]	; (80077c4 <xPortStartScheduler+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10a      	bne.n	80076c6 <xPortStartScheduler+0x26>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a3f      	ldr	r2, [pc, #252]	; (80077c8 <xPortStartScheduler+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x46>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076e6:	4b39      	ldr	r3, [pc, #228]	; (80077cc <xPortStartScheduler+0x12c>)
 80076e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	22ff      	movs	r2, #255	; 0xff
 80076f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <xPortStartScheduler+0x130>)
 800770c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800770e:	4b31      	ldr	r3, [pc, #196]	; (80077d4 <xPortStartScheduler+0x134>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007714:	e009      	b.n	800772a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007716:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <xPortStartScheduler+0x134>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <xPortStartScheduler+0x134>)
 800771e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d0ef      	beq.n	8007716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1c3 0307 	rsb	r3, r3, #7
 800773e:	2b04      	cmp	r3, #4
 8007740:	d00a      	beq.n	8007758 <xPortStartScheduler+0xb8>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <xPortStartScheduler+0x134>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <xPortStartScheduler+0x134>)
 8007760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <xPortStartScheduler+0x134>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <xPortStartScheduler+0x134>)
 800776c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <xPortStartScheduler+0x138>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <xPortStartScheduler+0x138>)
 800777c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007782:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <xPortStartScheduler+0x138>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <xPortStartScheduler+0x138>)
 8007788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800778c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800778e:	f000 f8dd 	bl	800794c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007792:	4b12      	ldr	r3, [pc, #72]	; (80077dc <xPortStartScheduler+0x13c>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007798:	f000 f8fc 	bl	8007994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <xPortStartScheduler+0x140>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <xPortStartScheduler+0x140>)
 80077a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077a8:	f7ff ff66 	bl	8007678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077ac:	f7fe fde0 	bl	8006370 <vTaskSwitchContext>
	prvTaskExitError();
 80077b0:	f7ff ff22 	bl	80075f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	e000ed00 	.word	0xe000ed00
 80077c4:	410fc271 	.word	0x410fc271
 80077c8:	410fc270 	.word	0x410fc270
 80077cc:	e000e400 	.word	0xe000e400
 80077d0:	20000d88 	.word	0x20000d88
 80077d4:	20000d8c 	.word	0x20000d8c
 80077d8:	e000ed20 	.word	0xe000ed20
 80077dc:	20000014 	.word	0x20000014
 80077e0:	e000ef34 	.word	0xe000ef34

080077e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	607b      	str	r3, [r7, #4]
}
 80077fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <vPortEnterCritical+0x58>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <vPortEnterCritical+0x58>)
 8007806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <vPortEnterCritical+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d10f      	bne.n	8007830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortEnterCritical+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <vPortEnterCritical+0x4c>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	603b      	str	r3, [r7, #0]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vPortEnterCritical+0x4a>
	}
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000014 	.word	0x20000014
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vPortExitCritical+0x50>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <vPortExitCritical+0x24>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <vPortExitCritical+0x50>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3b01      	subs	r3, #1
 800786e:	4a09      	ldr	r2, [pc, #36]	; (8007894 <vPortExitCritical+0x50>)
 8007870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <vPortExitCritical+0x50>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <vPortExitCritical+0x42>
 800787a:	2300      	movs	r3, #0
 800787c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f383 8811 	msr	BASEPRI, r3
}
 8007884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000014 	.word	0x20000014
	...

080078a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078a0:	f3ef 8009 	mrs	r0, PSP
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <pxCurrentTCBConst>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f01e 0f10 	tst.w	lr, #16
 80078b0:	bf08      	it	eq
 80078b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ba:	6010      	str	r0, [r2, #0]
 80078bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078c4:	f380 8811 	msr	BASEPRI, r0
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f7fe fd4e 	bl	8006370 <vTaskSwitchContext>
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f380 8811 	msr	BASEPRI, r0
 80078dc:	bc09      	pop	{r0, r3}
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	6808      	ldr	r0, [r1, #0]
 80078e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e6:	f01e 0f10 	tst.w	lr, #16
 80078ea:	bf08      	it	eq
 80078ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078f0:	f380 8809 	msr	PSP, r0
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst>:
 8007900:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
}
 8007920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007922:	f7fe fc6b 	bl	80061fc <xTaskIncrementTick>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <xPortSysTickHandler+0x40>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f383 8811 	msr	BASEPRI, r3
}
 800793e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <vPortSetupTimerInterrupt+0x38>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <vPortSetupTimerInterrupt+0x3c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <vPortSetupTimerInterrupt+0x40>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <vPortSetupTimerInterrupt+0x44>)
 800796a:	3b01      	subs	r3, #1
 800796c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010
 8007984:	e000e018 	.word	0xe000e018
 8007988:	20000008 	.word	0x20000008
 800798c:	10624dd3 	.word	0x10624dd3
 8007990:	e000e014 	.word	0xe000e014

08007994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079a4 <vPortEnableVFP+0x10>
 8007998:	6801      	ldr	r1, [r0, #0]
 800799a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800799e:	6001      	str	r1, [r0, #0]
 80079a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079a2:	bf00      	nop
 80079a4:	e000ed88 	.word	0xe000ed88

080079a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ae:	f3ef 8305 	mrs	r3, IPSR
 80079b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d914      	bls.n	80079e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <vPortValidateInterruptPriority+0x70>)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <vPortValidateInterruptPriority+0x74>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d20a      	bcs.n	80079e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <vPortValidateInterruptPriority+0x78>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <vPortValidateInterruptPriority+0x7c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d90a      	bls.n	8007a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	603b      	str	r3, [r7, #0]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <vPortValidateInterruptPriority+0x60>
	}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000e3f0 	.word	0xe000e3f0
 8007a1c:	20000d88 	.word	0x20000d88
 8007a20:	e000ed0c 	.word	0xe000ed0c
 8007a24:	20000d8c 	.word	0x20000d8c

08007a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a34:	f7fe fb26 	bl	8006084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a38:	4b5b      	ldr	r3, [pc, #364]	; (8007ba8 <pvPortMalloc+0x180>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a40:	f000 f920 	bl	8007c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <pvPortMalloc+0x184>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8093 	bne.w	8007b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01d      	beq.n	8007a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a58:	2208      	movs	r2, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d014      	beq.n	8007a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f023 0307 	bic.w	r3, r3, #7
 8007a70:	3308      	adds	r3, #8
 8007a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <pvPortMalloc+0x6c>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	617b      	str	r3, [r7, #20]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d06e      	beq.n	8007b78 <pvPortMalloc+0x150>
 8007a9a:	4b45      	ldr	r3, [pc, #276]	; (8007bb0 <pvPortMalloc+0x188>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d869      	bhi.n	8007b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aa4:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <pvPortMalloc+0x18c>)
 8007aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <pvPortMalloc+0x18c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aae:	e004      	b.n	8007aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <pvPortMalloc+0xa4>
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f1      	bne.n	8007ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007acc:	4b36      	ldr	r3, [pc, #216]	; (8007ba8 <pvPortMalloc+0x180>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d050      	beq.n	8007b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	4413      	add	r3, r2
 8007ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2308      	movs	r3, #8
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d91f      	bls.n	8007b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <pvPortMalloc+0xf8>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	613b      	str	r3, [r7, #16]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b32:	69b8      	ldr	r0, [r7, #24]
 8007b34:	f000 f908 	bl	8007d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b38:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <pvPortMalloc+0x190>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d203      	bcs.n	8007b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b52:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <pvPortMalloc+0x190>)
 8007b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <pvPortMalloc+0x184>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <pvPortMalloc+0x194>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	4a11      	ldr	r2, [pc, #68]	; (8007bbc <pvPortMalloc+0x194>)
 8007b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b78:	f7fe fa92 	bl	80060a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <pvPortMalloc+0x174>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <pvPortMalloc+0x172>
	return pvReturn;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3728      	adds	r7, #40	; 0x28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20004998 	.word	0x20004998
 8007bac:	200049ac 	.word	0x200049ac
 8007bb0:	2000499c 	.word	0x2000499c
 8007bb4:	20004990 	.word	0x20004990
 8007bb8:	200049a0 	.word	0x200049a0
 8007bbc:	200049a4 	.word	0x200049a4

08007bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d04d      	beq.n	8007c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <vPortFree+0xb8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <vPortFree+0x44>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	60fb      	str	r3, [r7, #12]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <vPortFree+0x62>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60bb      	str	r3, [r7, #8]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <vPortFree+0xb8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01e      	beq.n	8007c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11a      	bne.n	8007c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <vPortFree+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c48:	f7fe fa1c 	bl	8006084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <vPortFree+0xbc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <vPortFree+0xbc>)
 8007c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f000 f874 	bl	8007d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vPortFree+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a06      	ldr	r2, [pc, #24]	; (8007c80 <vPortFree+0xc0>)
 8007c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c6a:	f7fe fa19 	bl	80060a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c6e:	bf00      	nop
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200049ac 	.word	0x200049ac
 8007c7c:	2000499c 	.word	0x2000499c
 8007c80:	200049a8 	.word	0x200049a8

08007c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c90:	4b27      	ldr	r3, [pc, #156]	; (8007d30 <prvHeapInit+0xac>)
 8007c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00c      	beq.n	8007cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <prvHeapInit+0xac>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <prvHeapInit+0xb0>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <prvHeapInit+0xb0>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0307 	bic.w	r3, r3, #7
 8007cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <prvHeapInit+0xb4>)
 8007ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ce6:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <prvHeapInit+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cee:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <prvHeapInit+0xb4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <prvHeapInit+0xb4>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <prvHeapInit+0xb8>)
 8007d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <prvHeapInit+0xbc>)
 8007d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <prvHeapInit+0xc0>)
 8007d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000d90 	.word	0x20000d90
 8007d34:	20004990 	.word	0x20004990
 8007d38:	20004998 	.word	0x20004998
 8007d3c:	200049a0 	.word	0x200049a0
 8007d40:	2000499c 	.word	0x2000499c
 8007d44:	200049ac 	.word	0x200049ac

08007d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d50:	4b28      	ldr	r3, [pc, #160]	; (8007df4 <prvInsertBlockIntoFreeList+0xac>)
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e002      	b.n	8007d5c <prvInsertBlockIntoFreeList+0x14>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8f7      	bhi.n	8007d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d108      	bne.n	8007d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	441a      	add	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d118      	bne.n	8007dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d00d      	beq.n	8007dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	441a      	add	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e008      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e003      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d002      	beq.n	8007de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20004990 	.word	0x20004990
 8007df8:	20004998 	.word	0x20004998

08007dfc <atoi>:
 8007dfc:	220a      	movs	r2, #10
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f000 b958 	b.w	80080b4 <strtol>

08007e04 <__errno>:
 8007e04:	4b01      	ldr	r3, [pc, #4]	; (8007e0c <__errno+0x8>)
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20000018 	.word	0x20000018

08007e10 <__libc_init_array>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	4d0d      	ldr	r5, [pc, #52]	; (8007e48 <__libc_init_array+0x38>)
 8007e14:	4c0d      	ldr	r4, [pc, #52]	; (8007e4c <__libc_init_array+0x3c>)
 8007e16:	1b64      	subs	r4, r4, r5
 8007e18:	10a4      	asrs	r4, r4, #2
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	42a6      	cmp	r6, r4
 8007e1e:	d109      	bne.n	8007e34 <__libc_init_array+0x24>
 8007e20:	4d0b      	ldr	r5, [pc, #44]	; (8007e50 <__libc_init_array+0x40>)
 8007e22:	4c0c      	ldr	r4, [pc, #48]	; (8007e54 <__libc_init_array+0x44>)
 8007e24:	f000 f9a0 	bl	8008168 <_init>
 8007e28:	1b64      	subs	r4, r4, r5
 8007e2a:	10a4      	asrs	r4, r4, #2
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	42a6      	cmp	r6, r4
 8007e30:	d105      	bne.n	8007e3e <__libc_init_array+0x2e>
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e38:	4798      	blx	r3
 8007e3a:	3601      	adds	r6, #1
 8007e3c:	e7ee      	b.n	8007e1c <__libc_init_array+0xc>
 8007e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e42:	4798      	blx	r3
 8007e44:	3601      	adds	r6, #1
 8007e46:	e7f2      	b.n	8007e2e <__libc_init_array+0x1e>
 8007e48:	0800891c 	.word	0x0800891c
 8007e4c:	0800891c 	.word	0x0800891c
 8007e50:	0800891c 	.word	0x0800891c
 8007e54:	08008920 	.word	0x08008920

08007e58 <__itoa>:
 8007e58:	1e93      	subs	r3, r2, #2
 8007e5a:	2b22      	cmp	r3, #34	; 0x22
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	460c      	mov	r4, r1
 8007e60:	d904      	bls.n	8007e6c <__itoa+0x14>
 8007e62:	2300      	movs	r3, #0
 8007e64:	700b      	strb	r3, [r1, #0]
 8007e66:	461c      	mov	r4, r3
 8007e68:	4620      	mov	r0, r4
 8007e6a:	bd10      	pop	{r4, pc}
 8007e6c:	2a0a      	cmp	r2, #10
 8007e6e:	d109      	bne.n	8007e84 <__itoa+0x2c>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	da07      	bge.n	8007e84 <__itoa+0x2c>
 8007e74:	232d      	movs	r3, #45	; 0x2d
 8007e76:	700b      	strb	r3, [r1, #0]
 8007e78:	4240      	negs	r0, r0
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4421      	add	r1, r4
 8007e7e:	f000 f923 	bl	80080c8 <__utoa>
 8007e82:	e7f1      	b.n	8007e68 <__itoa+0x10>
 8007e84:	2100      	movs	r1, #0
 8007e86:	e7f9      	b.n	8007e7c <__itoa+0x24>

08007e88 <itoa>:
 8007e88:	f7ff bfe6 	b.w	8007e58 <__itoa>

08007e8c <malloc>:
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <malloc+0xc>)
 8007e8e:	4601      	mov	r1, r0
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	f000 b819 	b.w	8007ec8 <_malloc_r>
 8007e96:	bf00      	nop
 8007e98:	20000018 	.word	0x20000018

08007e9c <memcpy>:
 8007e9c:	440a      	add	r2, r1
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ea4:	d100      	bne.n	8007ea8 <memcpy+0xc>
 8007ea6:	4770      	bx	lr
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	d1f9      	bne.n	8007eaa <memcpy+0xe>
 8007eb6:	bd10      	pop	{r4, pc}

08007eb8 <memset>:
 8007eb8:	4402      	add	r2, r0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d100      	bne.n	8007ec2 <memset+0xa>
 8007ec0:	4770      	bx	lr
 8007ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec6:	e7f9      	b.n	8007ebc <memset+0x4>

08007ec8 <_malloc_r>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	1ccd      	adds	r5, r1, #3
 8007ecc:	f025 0503 	bic.w	r5, r5, #3
 8007ed0:	3508      	adds	r5, #8
 8007ed2:	2d0c      	cmp	r5, #12
 8007ed4:	bf38      	it	cc
 8007ed6:	250c      	movcc	r5, #12
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	4606      	mov	r6, r0
 8007edc:	db01      	blt.n	8007ee2 <_malloc_r+0x1a>
 8007ede:	42a9      	cmp	r1, r5
 8007ee0:	d903      	bls.n	8007eea <_malloc_r+0x22>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eea:	f000 f92f 	bl	800814c <__malloc_lock>
 8007eee:	4921      	ldr	r1, [pc, #132]	; (8007f74 <_malloc_r+0xac>)
 8007ef0:	680a      	ldr	r2, [r1, #0]
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	b99c      	cbnz	r4, 8007f1e <_malloc_r+0x56>
 8007ef6:	4f20      	ldr	r7, [pc, #128]	; (8007f78 <_malloc_r+0xb0>)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	b923      	cbnz	r3, 8007f06 <_malloc_r+0x3e>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f83c 	bl	8007f7c <_sbrk_r>
 8007f04:	6038      	str	r0, [r7, #0]
 8007f06:	4629      	mov	r1, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 f837 	bl	8007f7c <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d123      	bne.n	8007f5a <_malloc_r+0x92>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f91e 	bl	8008158 <__malloc_unlock>
 8007f1c:	e7e3      	b.n	8007ee6 <_malloc_r+0x1e>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	1b5b      	subs	r3, r3, r5
 8007f22:	d417      	bmi.n	8007f54 <_malloc_r+0x8c>
 8007f24:	2b0b      	cmp	r3, #11
 8007f26:	d903      	bls.n	8007f30 <_malloc_r+0x68>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	441c      	add	r4, r3
 8007f2c:	6025      	str	r5, [r4, #0]
 8007f2e:	e004      	b.n	8007f3a <_malloc_r+0x72>
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	42a2      	cmp	r2, r4
 8007f34:	bf0c      	ite	eq
 8007f36:	600b      	streq	r3, [r1, #0]
 8007f38:	6053      	strne	r3, [r2, #4]
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f000 f90c 	bl	8008158 <__malloc_unlock>
 8007f40:	f104 000b 	add.w	r0, r4, #11
 8007f44:	1d23      	adds	r3, r4, #4
 8007f46:	f020 0007 	bic.w	r0, r0, #7
 8007f4a:	1ac2      	subs	r2, r0, r3
 8007f4c:	d0cc      	beq.n	8007ee8 <_malloc_r+0x20>
 8007f4e:	1a1b      	subs	r3, r3, r0
 8007f50:	50a3      	str	r3, [r4, r2]
 8007f52:	e7c9      	b.n	8007ee8 <_malloc_r+0x20>
 8007f54:	4622      	mov	r2, r4
 8007f56:	6864      	ldr	r4, [r4, #4]
 8007f58:	e7cc      	b.n	8007ef4 <_malloc_r+0x2c>
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d0e3      	beq.n	8007f2c <_malloc_r+0x64>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f808 	bl	8007f7c <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d1dd      	bne.n	8007f2c <_malloc_r+0x64>
 8007f70:	e7cf      	b.n	8007f12 <_malloc_r+0x4a>
 8007f72:	bf00      	nop
 8007f74:	200049b0 	.word	0x200049b0
 8007f78:	200049b4 	.word	0x200049b4

08007f7c <_sbrk_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_sbrk_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 fdce 	bl	8001b28 <_sbrk>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_sbrk_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_sbrk_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20004aec 	.word	0x20004aec

08007f9c <strcpy>:
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fa2:	f803 2b01 	strb.w	r2, [r3], #1
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	d1f9      	bne.n	8007f9e <strcpy+0x2>
 8007faa:	4770      	bx	lr

08007fac <_strtol_l.isra.0>:
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb2:	d001      	beq.n	8007fb8 <_strtol_l.isra.0+0xc>
 8007fb4:	2b24      	cmp	r3, #36	; 0x24
 8007fb6:	d906      	bls.n	8007fc6 <_strtol_l.isra.0+0x1a>
 8007fb8:	f7ff ff24 	bl	8007e04 <__errno>
 8007fbc:	2316      	movs	r3, #22
 8007fbe:	6003      	str	r3, [r0, #0]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	4f3a      	ldr	r7, [pc, #232]	; (80080b0 <_strtol_l.isra.0+0x104>)
 8007fc8:	468e      	mov	lr, r1
 8007fca:	4676      	mov	r6, lr
 8007fcc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007fd0:	5de5      	ldrb	r5, [r4, r7]
 8007fd2:	f015 0508 	ands.w	r5, r5, #8
 8007fd6:	d1f8      	bne.n	8007fca <_strtol_l.isra.0+0x1e>
 8007fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8007fda:	d134      	bne.n	8008046 <_strtol_l.isra.0+0x9a>
 8007fdc:	f89e 4000 	ldrb.w	r4, [lr]
 8007fe0:	f04f 0801 	mov.w	r8, #1
 8007fe4:	f106 0e02 	add.w	lr, r6, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d05c      	beq.n	80080a6 <_strtol_l.isra.0+0xfa>
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d10c      	bne.n	800800a <_strtol_l.isra.0+0x5e>
 8007ff0:	2c30      	cmp	r4, #48	; 0x30
 8007ff2:	d10a      	bne.n	800800a <_strtol_l.isra.0+0x5e>
 8007ff4:	f89e 4000 	ldrb.w	r4, [lr]
 8007ff8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007ffc:	2c58      	cmp	r4, #88	; 0x58
 8007ffe:	d14d      	bne.n	800809c <_strtol_l.isra.0+0xf0>
 8008000:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008004:	2310      	movs	r3, #16
 8008006:	f10e 0e02 	add.w	lr, lr, #2
 800800a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800800e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008012:	2600      	movs	r6, #0
 8008014:	fbbc f9f3 	udiv	r9, ip, r3
 8008018:	4635      	mov	r5, r6
 800801a:	fb03 ca19 	mls	sl, r3, r9, ip
 800801e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008022:	2f09      	cmp	r7, #9
 8008024:	d818      	bhi.n	8008058 <_strtol_l.isra.0+0xac>
 8008026:	463c      	mov	r4, r7
 8008028:	42a3      	cmp	r3, r4
 800802a:	dd24      	ble.n	8008076 <_strtol_l.isra.0+0xca>
 800802c:	2e00      	cmp	r6, #0
 800802e:	db1f      	blt.n	8008070 <_strtol_l.isra.0+0xc4>
 8008030:	45a9      	cmp	r9, r5
 8008032:	d31d      	bcc.n	8008070 <_strtol_l.isra.0+0xc4>
 8008034:	d101      	bne.n	800803a <_strtol_l.isra.0+0x8e>
 8008036:	45a2      	cmp	sl, r4
 8008038:	db1a      	blt.n	8008070 <_strtol_l.isra.0+0xc4>
 800803a:	fb05 4503 	mla	r5, r5, r3, r4
 800803e:	2601      	movs	r6, #1
 8008040:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008044:	e7eb      	b.n	800801e <_strtol_l.isra.0+0x72>
 8008046:	2c2b      	cmp	r4, #43	; 0x2b
 8008048:	bf08      	it	eq
 800804a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800804e:	46a8      	mov	r8, r5
 8008050:	bf08      	it	eq
 8008052:	f106 0e02 	addeq.w	lr, r6, #2
 8008056:	e7c7      	b.n	8007fe8 <_strtol_l.isra.0+0x3c>
 8008058:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800805c:	2f19      	cmp	r7, #25
 800805e:	d801      	bhi.n	8008064 <_strtol_l.isra.0+0xb8>
 8008060:	3c37      	subs	r4, #55	; 0x37
 8008062:	e7e1      	b.n	8008028 <_strtol_l.isra.0+0x7c>
 8008064:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008068:	2f19      	cmp	r7, #25
 800806a:	d804      	bhi.n	8008076 <_strtol_l.isra.0+0xca>
 800806c:	3c57      	subs	r4, #87	; 0x57
 800806e:	e7db      	b.n	8008028 <_strtol_l.isra.0+0x7c>
 8008070:	f04f 36ff 	mov.w	r6, #4294967295
 8008074:	e7e4      	b.n	8008040 <_strtol_l.isra.0+0x94>
 8008076:	2e00      	cmp	r6, #0
 8008078:	da05      	bge.n	8008086 <_strtol_l.isra.0+0xda>
 800807a:	2322      	movs	r3, #34	; 0x22
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	4665      	mov	r5, ip
 8008080:	b942      	cbnz	r2, 8008094 <_strtol_l.isra.0+0xe8>
 8008082:	4628      	mov	r0, r5
 8008084:	e79d      	b.n	8007fc2 <_strtol_l.isra.0+0x16>
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	d000      	beq.n	800808e <_strtol_l.isra.0+0xe2>
 800808c:	426d      	negs	r5, r5
 800808e:	2a00      	cmp	r2, #0
 8008090:	d0f7      	beq.n	8008082 <_strtol_l.isra.0+0xd6>
 8008092:	b10e      	cbz	r6, 8008098 <_strtol_l.isra.0+0xec>
 8008094:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	e7f2      	b.n	8008082 <_strtol_l.isra.0+0xd6>
 800809c:	2430      	movs	r4, #48	; 0x30
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1b3      	bne.n	800800a <_strtol_l.isra.0+0x5e>
 80080a2:	2308      	movs	r3, #8
 80080a4:	e7b1      	b.n	800800a <_strtol_l.isra.0+0x5e>
 80080a6:	2c30      	cmp	r4, #48	; 0x30
 80080a8:	d0a4      	beq.n	8007ff4 <_strtol_l.isra.0+0x48>
 80080aa:	230a      	movs	r3, #10
 80080ac:	e7ad      	b.n	800800a <_strtol_l.isra.0+0x5e>
 80080ae:	bf00      	nop
 80080b0:	08008812 	.word	0x08008812

080080b4 <strtol>:
 80080b4:	4613      	mov	r3, r2
 80080b6:	460a      	mov	r2, r1
 80080b8:	4601      	mov	r1, r0
 80080ba:	4802      	ldr	r0, [pc, #8]	; (80080c4 <strtol+0x10>)
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f7ff bf75 	b.w	8007fac <_strtol_l.isra.0>
 80080c2:	bf00      	nop
 80080c4:	20000018 	.word	0x20000018

080080c8 <__utoa>:
 80080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ca:	4c1f      	ldr	r4, [pc, #124]	; (8008148 <__utoa+0x80>)
 80080cc:	b08b      	sub	sp, #44	; 0x2c
 80080ce:	4605      	mov	r5, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	466e      	mov	r6, sp
 80080d4:	f104 0c20 	add.w	ip, r4, #32
 80080d8:	6820      	ldr	r0, [r4, #0]
 80080da:	6861      	ldr	r1, [r4, #4]
 80080dc:	4637      	mov	r7, r6
 80080de:	c703      	stmia	r7!, {r0, r1}
 80080e0:	3408      	adds	r4, #8
 80080e2:	4564      	cmp	r4, ip
 80080e4:	463e      	mov	r6, r7
 80080e6:	d1f7      	bne.n	80080d8 <__utoa+0x10>
 80080e8:	7921      	ldrb	r1, [r4, #4]
 80080ea:	7139      	strb	r1, [r7, #4]
 80080ec:	1e91      	subs	r1, r2, #2
 80080ee:	6820      	ldr	r0, [r4, #0]
 80080f0:	6038      	str	r0, [r7, #0]
 80080f2:	2922      	cmp	r1, #34	; 0x22
 80080f4:	f04f 0100 	mov.w	r1, #0
 80080f8:	d904      	bls.n	8008104 <__utoa+0x3c>
 80080fa:	7019      	strb	r1, [r3, #0]
 80080fc:	460b      	mov	r3, r1
 80080fe:	4618      	mov	r0, r3
 8008100:	b00b      	add	sp, #44	; 0x2c
 8008102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008104:	1e58      	subs	r0, r3, #1
 8008106:	4684      	mov	ip, r0
 8008108:	fbb5 f7f2 	udiv	r7, r5, r2
 800810c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008110:	fb02 5617 	mls	r6, r2, r7, r5
 8008114:	4476      	add	r6, lr
 8008116:	460c      	mov	r4, r1
 8008118:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800811c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008120:	462e      	mov	r6, r5
 8008122:	42b2      	cmp	r2, r6
 8008124:	f101 0101 	add.w	r1, r1, #1
 8008128:	463d      	mov	r5, r7
 800812a:	d9ed      	bls.n	8008108 <__utoa+0x40>
 800812c:	2200      	movs	r2, #0
 800812e:	545a      	strb	r2, [r3, r1]
 8008130:	1919      	adds	r1, r3, r4
 8008132:	1aa5      	subs	r5, r4, r2
 8008134:	42aa      	cmp	r2, r5
 8008136:	dae2      	bge.n	80080fe <__utoa+0x36>
 8008138:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800813c:	780e      	ldrb	r6, [r1, #0]
 800813e:	7006      	strb	r6, [r0, #0]
 8008140:	3201      	adds	r2, #1
 8008142:	f801 5901 	strb.w	r5, [r1], #-1
 8008146:	e7f4      	b.n	8008132 <__utoa+0x6a>
 8008148:	080087ec 	.word	0x080087ec

0800814c <__malloc_lock>:
 800814c:	4801      	ldr	r0, [pc, #4]	; (8008154 <__malloc_lock+0x8>)
 800814e:	f000 b809 	b.w	8008164 <__retarget_lock_acquire_recursive>
 8008152:	bf00      	nop
 8008154:	20004af4 	.word	0x20004af4

08008158 <__malloc_unlock>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__malloc_unlock+0x8>)
 800815a:	f000 b804 	b.w	8008166 <__retarget_lock_release_recursive>
 800815e:	bf00      	nop
 8008160:	20004af4 	.word	0x20004af4

08008164 <__retarget_lock_acquire_recursive>:
 8008164:	4770      	bx	lr

08008166 <__retarget_lock_release_recursive>:
 8008166:	4770      	bx	lr

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
